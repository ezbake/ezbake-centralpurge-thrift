/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.centralPurge.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AgeOffEventInfo implements org.apache.thrift.TBase<AgeOffEventInfo, AgeOffEventInfo._Fields>, java.io.Serializable, Cloneable, Comparable<AgeOffEventInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AgeOffEventInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TIME_CREATED_FIELD_DESC = new org.apache.thrift.protocol.TField("timeCreated", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField PURGE_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("purgeSet", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField COMPLETELY_PURGED_SET_FIELD_DESC = new org.apache.thrift.protocol.TField("completelyPurgedSet", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RESOLVED_FIELD_DESC = new org.apache.thrift.protocol.TField("resolved", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AgeOffEventInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AgeOffEventInfoTupleSchemeFactory());
  }

  public long id; // required
  public ezbake.base.thrift.DateTime timeCreated; // required
  public Set<Long> purgeSet; // required
  public Set<Long> completelyPurgedSet; // required
  public String user; // optional
  public boolean resolved; // required
  public String description; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    TIME_CREATED((short)2, "timeCreated"),
    PURGE_SET((short)3, "purgeSet"),
    COMPLETELY_PURGED_SET((short)4, "completelyPurgedSet"),
    USER((short)5, "user"),
    RESOLVED((short)6, "resolved"),
    DESCRIPTION((short)7, "description");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // TIME_CREATED
          return TIME_CREATED;
        case 3: // PURGE_SET
          return PURGE_SET;
        case 4: // COMPLETELY_PURGED_SET
          return COMPLETELY_PURGED_SET;
        case 5: // USER
          return USER;
        case 6: // RESOLVED
          return RESOLVED;
        case 7: // DESCRIPTION
          return DESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __RESOLVED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.USER,_Fields.DESCRIPTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TIME_CREATED, new org.apache.thrift.meta_data.FieldMetaData("timeCreated", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
    tmpMap.put(_Fields.PURGE_SET, new org.apache.thrift.meta_data.FieldMetaData("purgeSet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.COMPLETELY_PURGED_SET, new org.apache.thrift.meta_data.FieldMetaData("completelyPurgedSet", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESOLVED, new org.apache.thrift.meta_data.FieldMetaData("resolved", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AgeOffEventInfo.class, metaDataMap);
  }

  public AgeOffEventInfo() {
  }

  public AgeOffEventInfo(
    long id,
    ezbake.base.thrift.DateTime timeCreated,
    Set<Long> purgeSet,
    Set<Long> completelyPurgedSet,
    boolean resolved)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.timeCreated = timeCreated;
    this.purgeSet = purgeSet;
    this.completelyPurgedSet = completelyPurgedSet;
    this.resolved = resolved;
    setResolvedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AgeOffEventInfo(AgeOffEventInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetTimeCreated()) {
      this.timeCreated = new ezbake.base.thrift.DateTime(other.timeCreated);
    }
    if (other.isSetPurgeSet()) {
      Set<Long> __this__purgeSet = new HashSet<Long>(other.purgeSet);
      this.purgeSet = __this__purgeSet;
    }
    if (other.isSetCompletelyPurgedSet()) {
      Set<Long> __this__completelyPurgedSet = new HashSet<Long>(other.completelyPurgedSet);
      this.completelyPurgedSet = __this__completelyPurgedSet;
    }
    if (other.isSetUser()) {
      this.user = other.user;
    }
    this.resolved = other.resolved;
    if (other.isSetDescription()) {
      this.description = other.description;
    }
  }

  public AgeOffEventInfo deepCopy() {
    return new AgeOffEventInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.timeCreated = null;
    this.purgeSet = null;
    this.completelyPurgedSet = null;
    this.user = null;
    setResolvedIsSet(false);
    this.resolved = false;
    this.description = null;
  }

  public long getId() {
    return this.id;
  }

  public AgeOffEventInfo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public ezbake.base.thrift.DateTime getTimeCreated() {
    return this.timeCreated;
  }

  public AgeOffEventInfo setTimeCreated(ezbake.base.thrift.DateTime timeCreated) {
    this.timeCreated = timeCreated;
    return this;
  }

  public void unsetTimeCreated() {
    this.timeCreated = null;
  }

  /** Returns true if field timeCreated is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeCreated() {
    return this.timeCreated != null;
  }

  public void setTimeCreatedIsSet(boolean value) {
    if (!value) {
      this.timeCreated = null;
    }
  }

  public int getPurgeSetSize() {
    return (this.purgeSet == null) ? 0 : this.purgeSet.size();
  }

  public java.util.Iterator<Long> getPurgeSetIterator() {
    return (this.purgeSet == null) ? null : this.purgeSet.iterator();
  }

  public void addToPurgeSet(long elem) {
    if (this.purgeSet == null) {
      this.purgeSet = new HashSet<Long>();
    }
    this.purgeSet.add(elem);
  }

  public Set<Long> getPurgeSet() {
    return this.purgeSet;
  }

  public AgeOffEventInfo setPurgeSet(Set<Long> purgeSet) {
    this.purgeSet = purgeSet;
    return this;
  }

  public void unsetPurgeSet() {
    this.purgeSet = null;
  }

  /** Returns true if field purgeSet is set (has been assigned a value) and false otherwise */
  public boolean isSetPurgeSet() {
    return this.purgeSet != null;
  }

  public void setPurgeSetIsSet(boolean value) {
    if (!value) {
      this.purgeSet = null;
    }
  }

  public int getCompletelyPurgedSetSize() {
    return (this.completelyPurgedSet == null) ? 0 : this.completelyPurgedSet.size();
  }

  public java.util.Iterator<Long> getCompletelyPurgedSetIterator() {
    return (this.completelyPurgedSet == null) ? null : this.completelyPurgedSet.iterator();
  }

  public void addToCompletelyPurgedSet(long elem) {
    if (this.completelyPurgedSet == null) {
      this.completelyPurgedSet = new HashSet<Long>();
    }
    this.completelyPurgedSet.add(elem);
  }

  public Set<Long> getCompletelyPurgedSet() {
    return this.completelyPurgedSet;
  }

  public AgeOffEventInfo setCompletelyPurgedSet(Set<Long> completelyPurgedSet) {
    this.completelyPurgedSet = completelyPurgedSet;
    return this;
  }

  public void unsetCompletelyPurgedSet() {
    this.completelyPurgedSet = null;
  }

  /** Returns true if field completelyPurgedSet is set (has been assigned a value) and false otherwise */
  public boolean isSetCompletelyPurgedSet() {
    return this.completelyPurgedSet != null;
  }

  public void setCompletelyPurgedSetIsSet(boolean value) {
    if (!value) {
      this.completelyPurgedSet = null;
    }
  }

  public String getUser() {
    return this.user;
  }

  public AgeOffEventInfo setUser(String user) {
    this.user = user;
    return this;
  }

  public void unsetUser() {
    this.user = null;
  }

  /** Returns true if field user is set (has been assigned a value) and false otherwise */
  public boolean isSetUser() {
    return this.user != null;
  }

  public void setUserIsSet(boolean value) {
    if (!value) {
      this.user = null;
    }
  }

  public boolean isResolved() {
    return this.resolved;
  }

  public AgeOffEventInfo setResolved(boolean resolved) {
    this.resolved = resolved;
    setResolvedIsSet(true);
    return this;
  }

  public void unsetResolved() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESOLVED_ISSET_ID);
  }

  /** Returns true if field resolved is set (has been assigned a value) and false otherwise */
  public boolean isSetResolved() {
    return EncodingUtils.testBit(__isset_bitfield, __RESOLVED_ISSET_ID);
  }

  public void setResolvedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESOLVED_ISSET_ID, value);
  }

  public String getDescription() {
    return this.description;
  }

  public AgeOffEventInfo setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case TIME_CREATED:
      if (value == null) {
        unsetTimeCreated();
      } else {
        setTimeCreated((ezbake.base.thrift.DateTime)value);
      }
      break;

    case PURGE_SET:
      if (value == null) {
        unsetPurgeSet();
      } else {
        setPurgeSet((Set<Long>)value);
      }
      break;

    case COMPLETELY_PURGED_SET:
      if (value == null) {
        unsetCompletelyPurgedSet();
      } else {
        setCompletelyPurgedSet((Set<Long>)value);
      }
      break;

    case USER:
      if (value == null) {
        unsetUser();
      } else {
        setUser((String)value);
      }
      break;

    case RESOLVED:
      if (value == null) {
        unsetResolved();
      } else {
        setResolved((Boolean)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Long.valueOf(getId());

    case TIME_CREATED:
      return getTimeCreated();

    case PURGE_SET:
      return getPurgeSet();

    case COMPLETELY_PURGED_SET:
      return getCompletelyPurgedSet();

    case USER:
      return getUser();

    case RESOLVED:
      return Boolean.valueOf(isResolved());

    case DESCRIPTION:
      return getDescription();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case TIME_CREATED:
      return isSetTimeCreated();
    case PURGE_SET:
      return isSetPurgeSet();
    case COMPLETELY_PURGED_SET:
      return isSetCompletelyPurgedSet();
    case USER:
      return isSetUser();
    case RESOLVED:
      return isSetResolved();
    case DESCRIPTION:
      return isSetDescription();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AgeOffEventInfo)
      return this.equals((AgeOffEventInfo)that);
    return false;
  }

  public boolean equals(AgeOffEventInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_timeCreated = true && this.isSetTimeCreated();
    boolean that_present_timeCreated = true && that.isSetTimeCreated();
    if (this_present_timeCreated || that_present_timeCreated) {
      if (!(this_present_timeCreated && that_present_timeCreated))
        return false;
      if (!this.timeCreated.equals(that.timeCreated))
        return false;
    }

    boolean this_present_purgeSet = true && this.isSetPurgeSet();
    boolean that_present_purgeSet = true && that.isSetPurgeSet();
    if (this_present_purgeSet || that_present_purgeSet) {
      if (!(this_present_purgeSet && that_present_purgeSet))
        return false;
      if (!this.purgeSet.equals(that.purgeSet))
        return false;
    }

    boolean this_present_completelyPurgedSet = true && this.isSetCompletelyPurgedSet();
    boolean that_present_completelyPurgedSet = true && that.isSetCompletelyPurgedSet();
    if (this_present_completelyPurgedSet || that_present_completelyPurgedSet) {
      if (!(this_present_completelyPurgedSet && that_present_completelyPurgedSet))
        return false;
      if (!this.completelyPurgedSet.equals(that.completelyPurgedSet))
        return false;
    }

    boolean this_present_user = true && this.isSetUser();
    boolean that_present_user = true && that.isSetUser();
    if (this_present_user || that_present_user) {
      if (!(this_present_user && that_present_user))
        return false;
      if (!this.user.equals(that.user))
        return false;
    }

    boolean this_present_resolved = true;
    boolean that_present_resolved = true;
    if (this_present_resolved || that_present_resolved) {
      if (!(this_present_resolved && that_present_resolved))
        return false;
      if (this.resolved != that.resolved)
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_id = true;
    builder.append(present_id);
    if (present_id)
      builder.append(id);

    boolean present_timeCreated = true && (isSetTimeCreated());
    builder.append(present_timeCreated);
    if (present_timeCreated)
      builder.append(timeCreated);

    boolean present_purgeSet = true && (isSetPurgeSet());
    builder.append(present_purgeSet);
    if (present_purgeSet)
      builder.append(purgeSet);

    boolean present_completelyPurgedSet = true && (isSetCompletelyPurgedSet());
    builder.append(present_completelyPurgedSet);
    if (present_completelyPurgedSet)
      builder.append(completelyPurgedSet);

    boolean present_user = true && (isSetUser());
    builder.append(present_user);
    if (present_user)
      builder.append(user);

    boolean present_resolved = true;
    builder.append(present_resolved);
    if (present_resolved)
      builder.append(resolved);

    boolean present_description = true && (isSetDescription());
    builder.append(present_description);
    if (present_description)
      builder.append(description);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(AgeOffEventInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeCreated()).compareTo(other.isSetTimeCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeCreated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeCreated, other.timeCreated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPurgeSet()).compareTo(other.isSetPurgeSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurgeSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purgeSet, other.purgeSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompletelyPurgedSet()).compareTo(other.isSetCompletelyPurgedSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompletelyPurgedSet()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completelyPurgedSet, other.completelyPurgedSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResolved()).compareTo(other.isSetResolved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResolved()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resolved, other.resolved);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AgeOffEventInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeCreated:");
    if (this.timeCreated == null) {
      sb.append("null");
    } else {
      sb.append(this.timeCreated);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("purgeSet:");
    if (this.purgeSet == null) {
      sb.append("null");
    } else {
      sb.append(this.purgeSet);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("completelyPurgedSet:");
    if (this.completelyPurgedSet == null) {
      sb.append("null");
    } else {
      sb.append(this.completelyPurgedSet);
    }
    first = false;
    if (isSetUser()) {
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("resolved:");
    sb.append(this.resolved);
    first = false;
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (timeCreated == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeCreated' was not present! Struct: " + toString());
    }
    if (purgeSet == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'purgeSet' was not present! Struct: " + toString());
    }
    if (completelyPurgedSet == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'completelyPurgedSet' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'resolved' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
    if (timeCreated != null) {
      timeCreated.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AgeOffEventInfoStandardSchemeFactory implements SchemeFactory {
    public AgeOffEventInfoStandardScheme getScheme() {
      return new AgeOffEventInfoStandardScheme();
    }
  }

  private static class AgeOffEventInfoStandardScheme extends StandardScheme<AgeOffEventInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AgeOffEventInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIME_CREATED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.timeCreated = new ezbake.base.thrift.DateTime();
              struct.timeCreated.read(iprot);
              struct.setTimeCreatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PURGE_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set20 = iprot.readSetBegin();
                struct.purgeSet = new HashSet<Long>(2*_set20.size);
                for (int _i21 = 0; _i21 < _set20.size; ++_i21)
                {
                  long _elem22;
                  _elem22 = iprot.readI64();
                  struct.purgeSet.add(_elem22);
                }
                iprot.readSetEnd();
              }
              struct.setPurgeSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPLETELY_PURGED_SET
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set23 = iprot.readSetBegin();
                struct.completelyPurgedSet = new HashSet<Long>(2*_set23.size);
                for (int _i24 = 0; _i24 < _set23.size; ++_i24)
                {
                  long _elem25;
                  _elem25 = iprot.readI64();
                  struct.completelyPurgedSet.add(_elem25);
                }
                iprot.readSetEnd();
              }
              struct.setCompletelyPurgedSetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user = iprot.readString();
              struct.setUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESOLVED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.resolved = iprot.readBool();
              struct.setResolvedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetResolved()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'resolved' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AgeOffEventInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      if (struct.timeCreated != null) {
        oprot.writeFieldBegin(TIME_CREATED_FIELD_DESC);
        struct.timeCreated.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.purgeSet != null) {
        oprot.writeFieldBegin(PURGE_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.purgeSet.size()));
          for (long _iter26 : struct.purgeSet)
          {
            oprot.writeI64(_iter26);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.completelyPurgedSet != null) {
        oprot.writeFieldBegin(COMPLETELY_PURGED_SET_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.completelyPurgedSet.size()));
          for (long _iter27 : struct.completelyPurgedSet)
          {
            oprot.writeI64(_iter27);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.user != null) {
        if (struct.isSetUser()) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(RESOLVED_FIELD_DESC);
      oprot.writeBool(struct.resolved);
      oprot.writeFieldEnd();
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AgeOffEventInfoTupleSchemeFactory implements SchemeFactory {
    public AgeOffEventInfoTupleScheme getScheme() {
      return new AgeOffEventInfoTupleScheme();
    }
  }

  private static class AgeOffEventInfoTupleScheme extends TupleScheme<AgeOffEventInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AgeOffEventInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      struct.timeCreated.write(oprot);
      {
        oprot.writeI32(struct.purgeSet.size());
        for (long _iter28 : struct.purgeSet)
        {
          oprot.writeI64(_iter28);
        }
      }
      {
        oprot.writeI32(struct.completelyPurgedSet.size());
        for (long _iter29 : struct.completelyPurgedSet)
        {
          oprot.writeI64(_iter29);
        }
      }
      oprot.writeBool(struct.resolved);
      BitSet optionals = new BitSet();
      if (struct.isSetUser()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetUser()) {
        oprot.writeString(struct.user);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AgeOffEventInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.timeCreated = new ezbake.base.thrift.DateTime();
      struct.timeCreated.read(iprot);
      struct.setTimeCreatedIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set30 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.purgeSet = new HashSet<Long>(2*_set30.size);
        for (int _i31 = 0; _i31 < _set30.size; ++_i31)
        {
          long _elem32;
          _elem32 = iprot.readI64();
          struct.purgeSet.add(_elem32);
        }
      }
      struct.setPurgeSetIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set33 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
        struct.completelyPurgedSet = new HashSet<Long>(2*_set33.size);
        for (int _i34 = 0; _i34 < _set33.size; ++_i34)
        {
          long _elem35;
          _elem35 = iprot.readI64();
          struct.completelyPurgedSet.add(_elem35);
        }
      }
      struct.setCompletelyPurgedSetIsSet(true);
      struct.resolved = iprot.readBool();
      struct.setResolvedIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.user = iprot.readString();
        struct.setUserIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
    }
  }

}

