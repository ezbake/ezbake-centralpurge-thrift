/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.centralPurge.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EzCentralPurgeService {

  public interface Iface extends ezbake.base.thrift.EzBakeBaseService.Iface {

    public ezbake.services.provenance.thrift.PurgeInitiationResult beginPurge(ezbake.base.thrift.EzSecurityToken token, List<String> uris, String name, String description) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException;

    public ezbake.services.provenance.thrift.PurgeInitiationResult beginVirusPurge(ezbake.base.thrift.EzSecurityToken token, List<String> uris, String name, String description) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException;

    public List<CentralPurgeState> getPurgeState(ezbake.base.thrift.EzSecurityToken token, List<Long> purgeIds) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException;

    public AgeOffEventInfo beginManualAgeOff(ezbake.base.thrift.EzSecurityToken token, long ruleId) throws ezbake.base.thrift.EzSecurityTokenException, ezbake.services.provenance.thrift.ProvenanceAgeOffRuleNotFoundException, CentralPurgeServiceException, org.apache.thrift.TException;

    public void updatePurge(ezbake.base.thrift.EzSecurityToken token, ezbake.base.thrift.PurgeState state, String applicationName, String serviceName) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException;

    public void resolvePurge(ezbake.base.thrift.EzSecurityToken token, long purgeId, String notes) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException;

    public List<CentralAgeOffEventState> getAgeOffEventState(ezbake.base.thrift.EzSecurityToken token, List<Long> ageOffEventIds) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException;

    public List<Long> getAllAgeOffEvents(ezbake.base.thrift.EzSecurityToken token) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException;

    public void resolveAgeOffEvent(ezbake.base.thrift.EzSecurityToken token, long ageOffEventId, String notes) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException;

    public CentralPurgeQueryResults getPagedSortedFilteredPurgeStates(ezbake.base.thrift.EzSecurityToken token, List<CentralPurgeStatus> statuses, int pageNum, int numPerPage) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException;

    public CentralAgeOffEventQueryResults getPagedSortedFilteredAgeOffEventStates(ezbake.base.thrift.EzSecurityToken token, List<CentralPurgeStatus> statuses, int pageNum, int numPerPage) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException;

  }

  public interface AsyncIface extends ezbake.base.thrift.EzBakeBaseService .AsyncIface {

    public void beginPurge(ezbake.base.thrift.EzSecurityToken token, List<String> uris, String name, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void beginVirusPurge(ezbake.base.thrift.EzSecurityToken token, List<String> uris, String name, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPurgeState(ezbake.base.thrift.EzSecurityToken token, List<Long> purgeIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void beginManualAgeOff(ezbake.base.thrift.EzSecurityToken token, long ruleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updatePurge(ezbake.base.thrift.EzSecurityToken token, ezbake.base.thrift.PurgeState state, String applicationName, String serviceName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resolvePurge(ezbake.base.thrift.EzSecurityToken token, long purgeId, String notes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAgeOffEventState(ezbake.base.thrift.EzSecurityToken token, List<Long> ageOffEventIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllAgeOffEvents(ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resolveAgeOffEvent(ezbake.base.thrift.EzSecurityToken token, long ageOffEventId, String notes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPagedSortedFilteredPurgeStates(ezbake.base.thrift.EzSecurityToken token, List<CentralPurgeStatus> statuses, int pageNum, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getPagedSortedFilteredAgeOffEventStates(ezbake.base.thrift.EzSecurityToken token, List<CentralPurgeStatus> statuses, int pageNum, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ezbake.base.thrift.EzBakeBaseService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ezbake.services.provenance.thrift.PurgeInitiationResult beginPurge(ezbake.base.thrift.EzSecurityToken token, List<String> uris, String name, String description) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      send_beginPurge(token, uris, name, description);
      return recv_beginPurge();
    }

    public void send_beginPurge(ezbake.base.thrift.EzSecurityToken token, List<String> uris, String name, String description) throws org.apache.thrift.TException
    {
      beginPurge_args args = new beginPurge_args();
      args.setToken(token);
      args.setUris(uris);
      args.setName(name);
      args.setDescription(description);
      sendBase("beginPurge", args);
    }

    public ezbake.services.provenance.thrift.PurgeInitiationResult recv_beginPurge() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      beginPurge_result result = new beginPurge_result();
      receiveBase(result, "beginPurge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.down != null) {
        throw result.down;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "beginPurge failed: unknown result");
    }

    public ezbake.services.provenance.thrift.PurgeInitiationResult beginVirusPurge(ezbake.base.thrift.EzSecurityToken token, List<String> uris, String name, String description) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      send_beginVirusPurge(token, uris, name, description);
      return recv_beginVirusPurge();
    }

    public void send_beginVirusPurge(ezbake.base.thrift.EzSecurityToken token, List<String> uris, String name, String description) throws org.apache.thrift.TException
    {
      beginVirusPurge_args args = new beginVirusPurge_args();
      args.setToken(token);
      args.setUris(uris);
      args.setName(name);
      args.setDescription(description);
      sendBase("beginVirusPurge", args);
    }

    public ezbake.services.provenance.thrift.PurgeInitiationResult recv_beginVirusPurge() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      beginVirusPurge_result result = new beginVirusPurge_result();
      receiveBase(result, "beginVirusPurge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.down != null) {
        throw result.down;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "beginVirusPurge failed: unknown result");
    }

    public List<CentralPurgeState> getPurgeState(ezbake.base.thrift.EzSecurityToken token, List<Long> purgeIds) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      send_getPurgeState(token, purgeIds);
      return recv_getPurgeState();
    }

    public void send_getPurgeState(ezbake.base.thrift.EzSecurityToken token, List<Long> purgeIds) throws org.apache.thrift.TException
    {
      getPurgeState_args args = new getPurgeState_args();
      args.setToken(token);
      args.setPurgeIds(purgeIds);
      sendBase("getPurgeState", args);
    }

    public List<CentralPurgeState> recv_getPurgeState() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      getPurgeState_result result = new getPurgeState_result();
      receiveBase(result, "getPurgeState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.down != null) {
        throw result.down;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPurgeState failed: unknown result");
    }

    public AgeOffEventInfo beginManualAgeOff(ezbake.base.thrift.EzSecurityToken token, long ruleId) throws ezbake.base.thrift.EzSecurityTokenException, ezbake.services.provenance.thrift.ProvenanceAgeOffRuleNotFoundException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      send_beginManualAgeOff(token, ruleId);
      return recv_beginManualAgeOff();
    }

    public void send_beginManualAgeOff(ezbake.base.thrift.EzSecurityToken token, long ruleId) throws org.apache.thrift.TException
    {
      beginManualAgeOff_args args = new beginManualAgeOff_args();
      args.setToken(token);
      args.setRuleId(ruleId);
      sendBase("beginManualAgeOff", args);
    }

    public AgeOffEventInfo recv_beginManualAgeOff() throws ezbake.base.thrift.EzSecurityTokenException, ezbake.services.provenance.thrift.ProvenanceAgeOffRuleNotFoundException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      beginManualAgeOff_result result = new beginManualAgeOff_result();
      receiveBase(result, "beginManualAgeOff");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.ruleNotFound != null) {
        throw result.ruleNotFound;
      }
      if (result.down != null) {
        throw result.down;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "beginManualAgeOff failed: unknown result");
    }

    public void updatePurge(ezbake.base.thrift.EzSecurityToken token, ezbake.base.thrift.PurgeState state, String applicationName, String serviceName) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      send_updatePurge(token, state, applicationName, serviceName);
      recv_updatePurge();
    }

    public void send_updatePurge(ezbake.base.thrift.EzSecurityToken token, ezbake.base.thrift.PurgeState state, String applicationName, String serviceName) throws org.apache.thrift.TException
    {
      updatePurge_args args = new updatePurge_args();
      args.setToken(token);
      args.setState(state);
      args.setApplicationName(applicationName);
      args.setServiceName(serviceName);
      sendBase("updatePurge", args);
    }

    public void recv_updatePurge() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      updatePurge_result result = new updatePurge_result();
      receiveBase(result, "updatePurge");
      if (result.security != null) {
        throw result.security;
      }
      if (result.down != null) {
        throw result.down;
      }
      return;
    }

    public void resolvePurge(ezbake.base.thrift.EzSecurityToken token, long purgeId, String notes) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      send_resolvePurge(token, purgeId, notes);
      recv_resolvePurge();
    }

    public void send_resolvePurge(ezbake.base.thrift.EzSecurityToken token, long purgeId, String notes) throws org.apache.thrift.TException
    {
      resolvePurge_args args = new resolvePurge_args();
      args.setToken(token);
      args.setPurgeId(purgeId);
      args.setNotes(notes);
      sendBase("resolvePurge", args);
    }

    public void recv_resolvePurge() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      resolvePurge_result result = new resolvePurge_result();
      receiveBase(result, "resolvePurge");
      if (result.security != null) {
        throw result.security;
      }
      if (result.down != null) {
        throw result.down;
      }
      return;
    }

    public List<CentralAgeOffEventState> getAgeOffEventState(ezbake.base.thrift.EzSecurityToken token, List<Long> ageOffEventIds) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      send_getAgeOffEventState(token, ageOffEventIds);
      return recv_getAgeOffEventState();
    }

    public void send_getAgeOffEventState(ezbake.base.thrift.EzSecurityToken token, List<Long> ageOffEventIds) throws org.apache.thrift.TException
    {
      getAgeOffEventState_args args = new getAgeOffEventState_args();
      args.setToken(token);
      args.setAgeOffEventIds(ageOffEventIds);
      sendBase("getAgeOffEventState", args);
    }

    public List<CentralAgeOffEventState> recv_getAgeOffEventState() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      getAgeOffEventState_result result = new getAgeOffEventState_result();
      receiveBase(result, "getAgeOffEventState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.down != null) {
        throw result.down;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAgeOffEventState failed: unknown result");
    }

    public List<Long> getAllAgeOffEvents(ezbake.base.thrift.EzSecurityToken token) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      send_getAllAgeOffEvents(token);
      return recv_getAllAgeOffEvents();
    }

    public void send_getAllAgeOffEvents(ezbake.base.thrift.EzSecurityToken token) throws org.apache.thrift.TException
    {
      getAllAgeOffEvents_args args = new getAllAgeOffEvents_args();
      args.setToken(token);
      sendBase("getAllAgeOffEvents", args);
    }

    public List<Long> recv_getAllAgeOffEvents() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      getAllAgeOffEvents_result result = new getAllAgeOffEvents_result();
      receiveBase(result, "getAllAgeOffEvents");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.down != null) {
        throw result.down;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllAgeOffEvents failed: unknown result");
    }

    public void resolveAgeOffEvent(ezbake.base.thrift.EzSecurityToken token, long ageOffEventId, String notes) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      send_resolveAgeOffEvent(token, ageOffEventId, notes);
      recv_resolveAgeOffEvent();
    }

    public void send_resolveAgeOffEvent(ezbake.base.thrift.EzSecurityToken token, long ageOffEventId, String notes) throws org.apache.thrift.TException
    {
      resolveAgeOffEvent_args args = new resolveAgeOffEvent_args();
      args.setToken(token);
      args.setAgeOffEventId(ageOffEventId);
      args.setNotes(notes);
      sendBase("resolveAgeOffEvent", args);
    }

    public void recv_resolveAgeOffEvent() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      resolveAgeOffEvent_result result = new resolveAgeOffEvent_result();
      receiveBase(result, "resolveAgeOffEvent");
      if (result.security != null) {
        throw result.security;
      }
      if (result.down != null) {
        throw result.down;
      }
      return;
    }

    public CentralPurgeQueryResults getPagedSortedFilteredPurgeStates(ezbake.base.thrift.EzSecurityToken token, List<CentralPurgeStatus> statuses, int pageNum, int numPerPage) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      send_getPagedSortedFilteredPurgeStates(token, statuses, pageNum, numPerPage);
      return recv_getPagedSortedFilteredPurgeStates();
    }

    public void send_getPagedSortedFilteredPurgeStates(ezbake.base.thrift.EzSecurityToken token, List<CentralPurgeStatus> statuses, int pageNum, int numPerPage) throws org.apache.thrift.TException
    {
      getPagedSortedFilteredPurgeStates_args args = new getPagedSortedFilteredPurgeStates_args();
      args.setToken(token);
      args.setStatuses(statuses);
      args.setPageNum(pageNum);
      args.setNumPerPage(numPerPage);
      sendBase("getPagedSortedFilteredPurgeStates", args);
    }

    public CentralPurgeQueryResults recv_getPagedSortedFilteredPurgeStates() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      getPagedSortedFilteredPurgeStates_result result = new getPagedSortedFilteredPurgeStates_result();
      receiveBase(result, "getPagedSortedFilteredPurgeStates");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.down != null) {
        throw result.down;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPagedSortedFilteredPurgeStates failed: unknown result");
    }

    public CentralAgeOffEventQueryResults getPagedSortedFilteredAgeOffEventStates(ezbake.base.thrift.EzSecurityToken token, List<CentralPurgeStatus> statuses, int pageNum, int numPerPage) throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      send_getPagedSortedFilteredAgeOffEventStates(token, statuses, pageNum, numPerPage);
      return recv_getPagedSortedFilteredAgeOffEventStates();
    }

    public void send_getPagedSortedFilteredAgeOffEventStates(ezbake.base.thrift.EzSecurityToken token, List<CentralPurgeStatus> statuses, int pageNum, int numPerPage) throws org.apache.thrift.TException
    {
      getPagedSortedFilteredAgeOffEventStates_args args = new getPagedSortedFilteredAgeOffEventStates_args();
      args.setToken(token);
      args.setStatuses(statuses);
      args.setPageNum(pageNum);
      args.setNumPerPage(numPerPage);
      sendBase("getPagedSortedFilteredAgeOffEventStates", args);
    }

    public CentralAgeOffEventQueryResults recv_getPagedSortedFilteredAgeOffEventStates() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException
    {
      getPagedSortedFilteredAgeOffEventStates_result result = new getPagedSortedFilteredAgeOffEventStates_result();
      receiveBase(result, "getPagedSortedFilteredAgeOffEventStates");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.security != null) {
        throw result.security;
      }
      if (result.down != null) {
        throw result.down;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPagedSortedFilteredAgeOffEventStates failed: unknown result");
    }

  }
  public static class AsyncClient extends ezbake.base.thrift.EzBakeBaseService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void beginPurge(ezbake.base.thrift.EzSecurityToken token, List<String> uris, String name, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      beginPurge_call method_call = new beginPurge_call(token, uris, name, description, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class beginPurge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      private List<String> uris;
      private String name;
      private String description;
      public beginPurge_call(ezbake.base.thrift.EzSecurityToken token, List<String> uris, String name, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.uris = uris;
        this.name = name;
        this.description = description;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("beginPurge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        beginPurge_args args = new beginPurge_args();
        args.setToken(token);
        args.setUris(uris);
        args.setName(name);
        args.setDescription(description);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.services.provenance.thrift.PurgeInitiationResult getResult() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_beginPurge();
      }
    }

    public void beginVirusPurge(ezbake.base.thrift.EzSecurityToken token, List<String> uris, String name, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      beginVirusPurge_call method_call = new beginVirusPurge_call(token, uris, name, description, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class beginVirusPurge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      private List<String> uris;
      private String name;
      private String description;
      public beginVirusPurge_call(ezbake.base.thrift.EzSecurityToken token, List<String> uris, String name, String description, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.uris = uris;
        this.name = name;
        this.description = description;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("beginVirusPurge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        beginVirusPurge_args args = new beginVirusPurge_args();
        args.setToken(token);
        args.setUris(uris);
        args.setName(name);
        args.setDescription(description);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.services.provenance.thrift.PurgeInitiationResult getResult() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_beginVirusPurge();
      }
    }

    public void getPurgeState(ezbake.base.thrift.EzSecurityToken token, List<Long> purgeIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPurgeState_call method_call = new getPurgeState_call(token, purgeIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPurgeState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      private List<Long> purgeIds;
      public getPurgeState_call(ezbake.base.thrift.EzSecurityToken token, List<Long> purgeIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.purgeIds = purgeIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPurgeState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPurgeState_args args = new getPurgeState_args();
        args.setToken(token);
        args.setPurgeIds(purgeIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CentralPurgeState> getResult() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPurgeState();
      }
    }

    public void beginManualAgeOff(ezbake.base.thrift.EzSecurityToken token, long ruleId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      beginManualAgeOff_call method_call = new beginManualAgeOff_call(token, ruleId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class beginManualAgeOff_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      private long ruleId;
      public beginManualAgeOff_call(ezbake.base.thrift.EzSecurityToken token, long ruleId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ruleId = ruleId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("beginManualAgeOff", org.apache.thrift.protocol.TMessageType.CALL, 0));
        beginManualAgeOff_args args = new beginManualAgeOff_args();
        args.setToken(token);
        args.setRuleId(ruleId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AgeOffEventInfo getResult() throws ezbake.base.thrift.EzSecurityTokenException, ezbake.services.provenance.thrift.ProvenanceAgeOffRuleNotFoundException, CentralPurgeServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_beginManualAgeOff();
      }
    }

    public void updatePurge(ezbake.base.thrift.EzSecurityToken token, ezbake.base.thrift.PurgeState state, String applicationName, String serviceName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updatePurge_call method_call = new updatePurge_call(token, state, applicationName, serviceName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updatePurge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      private ezbake.base.thrift.PurgeState state;
      private String applicationName;
      private String serviceName;
      public updatePurge_call(ezbake.base.thrift.EzSecurityToken token, ezbake.base.thrift.PurgeState state, String applicationName, String serviceName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.state = state;
        this.applicationName = applicationName;
        this.serviceName = serviceName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updatePurge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updatePurge_args args = new updatePurge_args();
        args.setToken(token);
        args.setState(state);
        args.setApplicationName(applicationName);
        args.setServiceName(serviceName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updatePurge();
      }
    }

    public void resolvePurge(ezbake.base.thrift.EzSecurityToken token, long purgeId, String notes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resolvePurge_call method_call = new resolvePurge_call(token, purgeId, notes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resolvePurge_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      private long purgeId;
      private String notes;
      public resolvePurge_call(ezbake.base.thrift.EzSecurityToken token, long purgeId, String notes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.purgeId = purgeId;
        this.notes = notes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resolvePurge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resolvePurge_args args = new resolvePurge_args();
        args.setToken(token);
        args.setPurgeId(purgeId);
        args.setNotes(notes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_resolvePurge();
      }
    }

    public void getAgeOffEventState(ezbake.base.thrift.EzSecurityToken token, List<Long> ageOffEventIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAgeOffEventState_call method_call = new getAgeOffEventState_call(token, ageOffEventIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAgeOffEventState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      private List<Long> ageOffEventIds;
      public getAgeOffEventState_call(ezbake.base.thrift.EzSecurityToken token, List<Long> ageOffEventIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ageOffEventIds = ageOffEventIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAgeOffEventState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAgeOffEventState_args args = new getAgeOffEventState_args();
        args.setToken(token);
        args.setAgeOffEventIds(ageOffEventIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<CentralAgeOffEventState> getResult() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAgeOffEventState();
      }
    }

    public void getAllAgeOffEvents(ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllAgeOffEvents_call method_call = new getAllAgeOffEvents_call(token, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllAgeOffEvents_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      public getAllAgeOffEvents_call(ezbake.base.thrift.EzSecurityToken token, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllAgeOffEvents", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllAgeOffEvents_args args = new getAllAgeOffEvents_args();
        args.setToken(token);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllAgeOffEvents();
      }
    }

    public void resolveAgeOffEvent(ezbake.base.thrift.EzSecurityToken token, long ageOffEventId, String notes, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resolveAgeOffEvent_call method_call = new resolveAgeOffEvent_call(token, ageOffEventId, notes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resolveAgeOffEvent_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      private long ageOffEventId;
      private String notes;
      public resolveAgeOffEvent_call(ezbake.base.thrift.EzSecurityToken token, long ageOffEventId, String notes, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.ageOffEventId = ageOffEventId;
        this.notes = notes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resolveAgeOffEvent", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resolveAgeOffEvent_args args = new resolveAgeOffEvent_args();
        args.setToken(token);
        args.setAgeOffEventId(ageOffEventId);
        args.setNotes(notes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_resolveAgeOffEvent();
      }
    }

    public void getPagedSortedFilteredPurgeStates(ezbake.base.thrift.EzSecurityToken token, List<CentralPurgeStatus> statuses, int pageNum, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPagedSortedFilteredPurgeStates_call method_call = new getPagedSortedFilteredPurgeStates_call(token, statuses, pageNum, numPerPage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPagedSortedFilteredPurgeStates_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      private List<CentralPurgeStatus> statuses;
      private int pageNum;
      private int numPerPage;
      public getPagedSortedFilteredPurgeStates_call(ezbake.base.thrift.EzSecurityToken token, List<CentralPurgeStatus> statuses, int pageNum, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.statuses = statuses;
        this.pageNum = pageNum;
        this.numPerPage = numPerPage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPagedSortedFilteredPurgeStates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPagedSortedFilteredPurgeStates_args args = new getPagedSortedFilteredPurgeStates_args();
        args.setToken(token);
        args.setStatuses(statuses);
        args.setPageNum(pageNum);
        args.setNumPerPage(numPerPage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CentralPurgeQueryResults getResult() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPagedSortedFilteredPurgeStates();
      }
    }

    public void getPagedSortedFilteredAgeOffEventStates(ezbake.base.thrift.EzSecurityToken token, List<CentralPurgeStatus> statuses, int pageNum, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPagedSortedFilteredAgeOffEventStates_call method_call = new getPagedSortedFilteredAgeOffEventStates_call(token, statuses, pageNum, numPerPage, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPagedSortedFilteredAgeOffEventStates_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.base.thrift.EzSecurityToken token;
      private List<CentralPurgeStatus> statuses;
      private int pageNum;
      private int numPerPage;
      public getPagedSortedFilteredAgeOffEventStates_call(ezbake.base.thrift.EzSecurityToken token, List<CentralPurgeStatus> statuses, int pageNum, int numPerPage, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.statuses = statuses;
        this.pageNum = pageNum;
        this.numPerPage = numPerPage;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPagedSortedFilteredAgeOffEventStates", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPagedSortedFilteredAgeOffEventStates_args args = new getPagedSortedFilteredAgeOffEventStates_args();
        args.setToken(token);
        args.setStatuses(statuses);
        args.setPageNum(pageNum);
        args.setNumPerPage(numPerPage);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CentralAgeOffEventQueryResults getResult() throws ezbake.base.thrift.EzSecurityTokenException, CentralPurgeServiceException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPagedSortedFilteredAgeOffEventStates();
      }
    }

  }

  public static class Processor<I extends Iface> extends ezbake.base.thrift.EzBakeBaseService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("beginPurge", new beginPurge());
      processMap.put("beginVirusPurge", new beginVirusPurge());
      processMap.put("getPurgeState", new getPurgeState());
      processMap.put("beginManualAgeOff", new beginManualAgeOff());
      processMap.put("updatePurge", new updatePurge());
      processMap.put("resolvePurge", new resolvePurge());
      processMap.put("getAgeOffEventState", new getAgeOffEventState());
      processMap.put("getAllAgeOffEvents", new getAllAgeOffEvents());
      processMap.put("resolveAgeOffEvent", new resolveAgeOffEvent());
      processMap.put("getPagedSortedFilteredPurgeStates", new getPagedSortedFilteredPurgeStates());
      processMap.put("getPagedSortedFilteredAgeOffEventStates", new getPagedSortedFilteredAgeOffEventStates());
      return processMap;
    }

    public static class beginPurge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, beginPurge_args> {
      public beginPurge() {
        super("beginPurge");
      }

      public beginPurge_args getEmptyArgsInstance() {
        return new beginPurge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public beginPurge_result getResult(I iface, beginPurge_args args) throws org.apache.thrift.TException {
        beginPurge_result result = new beginPurge_result();
        try {
          result.success = iface.beginPurge(args.token, args.uris, args.name, args.description);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (CentralPurgeServiceException down) {
          result.down = down;
        }
        return result;
      }
    }

    public static class beginVirusPurge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, beginVirusPurge_args> {
      public beginVirusPurge() {
        super("beginVirusPurge");
      }

      public beginVirusPurge_args getEmptyArgsInstance() {
        return new beginVirusPurge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public beginVirusPurge_result getResult(I iface, beginVirusPurge_args args) throws org.apache.thrift.TException {
        beginVirusPurge_result result = new beginVirusPurge_result();
        try {
          result.success = iface.beginVirusPurge(args.token, args.uris, args.name, args.description);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (CentralPurgeServiceException down) {
          result.down = down;
        }
        return result;
      }
    }

    public static class getPurgeState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPurgeState_args> {
      public getPurgeState() {
        super("getPurgeState");
      }

      public getPurgeState_args getEmptyArgsInstance() {
        return new getPurgeState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPurgeState_result getResult(I iface, getPurgeState_args args) throws org.apache.thrift.TException {
        getPurgeState_result result = new getPurgeState_result();
        try {
          result.success = iface.getPurgeState(args.token, args.purgeIds);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (CentralPurgeServiceException down) {
          result.down = down;
        }
        return result;
      }
    }

    public static class beginManualAgeOff<I extends Iface> extends org.apache.thrift.ProcessFunction<I, beginManualAgeOff_args> {
      public beginManualAgeOff() {
        super("beginManualAgeOff");
      }

      public beginManualAgeOff_args getEmptyArgsInstance() {
        return new beginManualAgeOff_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public beginManualAgeOff_result getResult(I iface, beginManualAgeOff_args args) throws org.apache.thrift.TException {
        beginManualAgeOff_result result = new beginManualAgeOff_result();
        try {
          result.success = iface.beginManualAgeOff(args.token, args.ruleId);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (ezbake.services.provenance.thrift.ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
          result.ruleNotFound = ruleNotFound;
        } catch (CentralPurgeServiceException down) {
          result.down = down;
        }
        return result;
      }
    }

    public static class updatePurge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updatePurge_args> {
      public updatePurge() {
        super("updatePurge");
      }

      public updatePurge_args getEmptyArgsInstance() {
        return new updatePurge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updatePurge_result getResult(I iface, updatePurge_args args) throws org.apache.thrift.TException {
        updatePurge_result result = new updatePurge_result();
        try {
          iface.updatePurge(args.token, args.state, args.applicationName, args.serviceName);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (CentralPurgeServiceException down) {
          result.down = down;
        }
        return result;
      }
    }

    public static class resolvePurge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resolvePurge_args> {
      public resolvePurge() {
        super("resolvePurge");
      }

      public resolvePurge_args getEmptyArgsInstance() {
        return new resolvePurge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resolvePurge_result getResult(I iface, resolvePurge_args args) throws org.apache.thrift.TException {
        resolvePurge_result result = new resolvePurge_result();
        try {
          iface.resolvePurge(args.token, args.purgeId, args.notes);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (CentralPurgeServiceException down) {
          result.down = down;
        }
        return result;
      }
    }

    public static class getAgeOffEventState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAgeOffEventState_args> {
      public getAgeOffEventState() {
        super("getAgeOffEventState");
      }

      public getAgeOffEventState_args getEmptyArgsInstance() {
        return new getAgeOffEventState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAgeOffEventState_result getResult(I iface, getAgeOffEventState_args args) throws org.apache.thrift.TException {
        getAgeOffEventState_result result = new getAgeOffEventState_result();
        try {
          result.success = iface.getAgeOffEventState(args.token, args.ageOffEventIds);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (CentralPurgeServiceException down) {
          result.down = down;
        }
        return result;
      }
    }

    public static class getAllAgeOffEvents<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllAgeOffEvents_args> {
      public getAllAgeOffEvents() {
        super("getAllAgeOffEvents");
      }

      public getAllAgeOffEvents_args getEmptyArgsInstance() {
        return new getAllAgeOffEvents_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllAgeOffEvents_result getResult(I iface, getAllAgeOffEvents_args args) throws org.apache.thrift.TException {
        getAllAgeOffEvents_result result = new getAllAgeOffEvents_result();
        try {
          result.success = iface.getAllAgeOffEvents(args.token);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (CentralPurgeServiceException down) {
          result.down = down;
        }
        return result;
      }
    }

    public static class resolveAgeOffEvent<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resolveAgeOffEvent_args> {
      public resolveAgeOffEvent() {
        super("resolveAgeOffEvent");
      }

      public resolveAgeOffEvent_args getEmptyArgsInstance() {
        return new resolveAgeOffEvent_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resolveAgeOffEvent_result getResult(I iface, resolveAgeOffEvent_args args) throws org.apache.thrift.TException {
        resolveAgeOffEvent_result result = new resolveAgeOffEvent_result();
        try {
          iface.resolveAgeOffEvent(args.token, args.ageOffEventId, args.notes);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (CentralPurgeServiceException down) {
          result.down = down;
        }
        return result;
      }
    }

    public static class getPagedSortedFilteredPurgeStates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPagedSortedFilteredPurgeStates_args> {
      public getPagedSortedFilteredPurgeStates() {
        super("getPagedSortedFilteredPurgeStates");
      }

      public getPagedSortedFilteredPurgeStates_args getEmptyArgsInstance() {
        return new getPagedSortedFilteredPurgeStates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPagedSortedFilteredPurgeStates_result getResult(I iface, getPagedSortedFilteredPurgeStates_args args) throws org.apache.thrift.TException {
        getPagedSortedFilteredPurgeStates_result result = new getPagedSortedFilteredPurgeStates_result();
        try {
          result.success = iface.getPagedSortedFilteredPurgeStates(args.token, args.statuses, args.pageNum, args.numPerPage);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (CentralPurgeServiceException down) {
          result.down = down;
        }
        return result;
      }
    }

    public static class getPagedSortedFilteredAgeOffEventStates<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPagedSortedFilteredAgeOffEventStates_args> {
      public getPagedSortedFilteredAgeOffEventStates() {
        super("getPagedSortedFilteredAgeOffEventStates");
      }

      public getPagedSortedFilteredAgeOffEventStates_args getEmptyArgsInstance() {
        return new getPagedSortedFilteredAgeOffEventStates_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPagedSortedFilteredAgeOffEventStates_result getResult(I iface, getPagedSortedFilteredAgeOffEventStates_args args) throws org.apache.thrift.TException {
        getPagedSortedFilteredAgeOffEventStates_result result = new getPagedSortedFilteredAgeOffEventStates_result();
        try {
          result.success = iface.getPagedSortedFilteredAgeOffEventStates(args.token, args.statuses, args.pageNum, args.numPerPage);
        } catch (ezbake.base.thrift.EzSecurityTokenException security) {
          result.security = security;
        } catch (CentralPurgeServiceException down) {
          result.down = down;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends ezbake.base.thrift.EzBakeBaseService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("beginPurge", new beginPurge());
      processMap.put("beginVirusPurge", new beginVirusPurge());
      processMap.put("getPurgeState", new getPurgeState());
      processMap.put("beginManualAgeOff", new beginManualAgeOff());
      processMap.put("updatePurge", new updatePurge());
      processMap.put("resolvePurge", new resolvePurge());
      processMap.put("getAgeOffEventState", new getAgeOffEventState());
      processMap.put("getAllAgeOffEvents", new getAllAgeOffEvents());
      processMap.put("resolveAgeOffEvent", new resolveAgeOffEvent());
      processMap.put("getPagedSortedFilteredPurgeStates", new getPagedSortedFilteredPurgeStates());
      processMap.put("getPagedSortedFilteredAgeOffEventStates", new getPagedSortedFilteredAgeOffEventStates());
      return processMap;
    }

    public static class beginPurge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, beginPurge_args, ezbake.services.provenance.thrift.PurgeInitiationResult> {
      public beginPurge() {
        super("beginPurge");
      }

      public beginPurge_args getEmptyArgsInstance() {
        return new beginPurge_args();
      }

      public AsyncMethodCallback<ezbake.services.provenance.thrift.PurgeInitiationResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.services.provenance.thrift.PurgeInitiationResult>() { 
          public void onComplete(ezbake.services.provenance.thrift.PurgeInitiationResult o) {
            beginPurge_result result = new beginPurge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            beginPurge_result result = new beginPurge_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof CentralPurgeServiceException) {
                        result.down = (CentralPurgeServiceException) e;
                        result.setDownIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, beginPurge_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.services.provenance.thrift.PurgeInitiationResult> resultHandler) throws TException {
        iface.beginPurge(args.token, args.uris, args.name, args.description,resultHandler);
      }
    }

    public static class beginVirusPurge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, beginVirusPurge_args, ezbake.services.provenance.thrift.PurgeInitiationResult> {
      public beginVirusPurge() {
        super("beginVirusPurge");
      }

      public beginVirusPurge_args getEmptyArgsInstance() {
        return new beginVirusPurge_args();
      }

      public AsyncMethodCallback<ezbake.services.provenance.thrift.PurgeInitiationResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.services.provenance.thrift.PurgeInitiationResult>() { 
          public void onComplete(ezbake.services.provenance.thrift.PurgeInitiationResult o) {
            beginVirusPurge_result result = new beginVirusPurge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            beginVirusPurge_result result = new beginVirusPurge_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof CentralPurgeServiceException) {
                        result.down = (CentralPurgeServiceException) e;
                        result.setDownIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, beginVirusPurge_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.services.provenance.thrift.PurgeInitiationResult> resultHandler) throws TException {
        iface.beginVirusPurge(args.token, args.uris, args.name, args.description,resultHandler);
      }
    }

    public static class getPurgeState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPurgeState_args, List<CentralPurgeState>> {
      public getPurgeState() {
        super("getPurgeState");
      }

      public getPurgeState_args getEmptyArgsInstance() {
        return new getPurgeState_args();
      }

      public AsyncMethodCallback<List<CentralPurgeState>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CentralPurgeState>>() { 
          public void onComplete(List<CentralPurgeState> o) {
            getPurgeState_result result = new getPurgeState_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPurgeState_result result = new getPurgeState_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof CentralPurgeServiceException) {
                        result.down = (CentralPurgeServiceException) e;
                        result.setDownIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPurgeState_args args, org.apache.thrift.async.AsyncMethodCallback<List<CentralPurgeState>> resultHandler) throws TException {
        iface.getPurgeState(args.token, args.purgeIds,resultHandler);
      }
    }

    public static class beginManualAgeOff<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, beginManualAgeOff_args, AgeOffEventInfo> {
      public beginManualAgeOff() {
        super("beginManualAgeOff");
      }

      public beginManualAgeOff_args getEmptyArgsInstance() {
        return new beginManualAgeOff_args();
      }

      public AsyncMethodCallback<AgeOffEventInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AgeOffEventInfo>() { 
          public void onComplete(AgeOffEventInfo o) {
            beginManualAgeOff_result result = new beginManualAgeOff_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            beginManualAgeOff_result result = new beginManualAgeOff_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ezbake.services.provenance.thrift.ProvenanceAgeOffRuleNotFoundException) {
                        result.ruleNotFound = (ezbake.services.provenance.thrift.ProvenanceAgeOffRuleNotFoundException) e;
                        result.setRuleNotFoundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof CentralPurgeServiceException) {
                        result.down = (CentralPurgeServiceException) e;
                        result.setDownIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, beginManualAgeOff_args args, org.apache.thrift.async.AsyncMethodCallback<AgeOffEventInfo> resultHandler) throws TException {
        iface.beginManualAgeOff(args.token, args.ruleId,resultHandler);
      }
    }

    public static class updatePurge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updatePurge_args, Void> {
      public updatePurge() {
        super("updatePurge");
      }

      public updatePurge_args getEmptyArgsInstance() {
        return new updatePurge_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updatePurge_result result = new updatePurge_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updatePurge_result result = new updatePurge_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof CentralPurgeServiceException) {
                        result.down = (CentralPurgeServiceException) e;
                        result.setDownIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updatePurge_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updatePurge(args.token, args.state, args.applicationName, args.serviceName,resultHandler);
      }
    }

    public static class resolvePurge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resolvePurge_args, Void> {
      public resolvePurge() {
        super("resolvePurge");
      }

      public resolvePurge_args getEmptyArgsInstance() {
        return new resolvePurge_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            resolvePurge_result result = new resolvePurge_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resolvePurge_result result = new resolvePurge_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof CentralPurgeServiceException) {
                        result.down = (CentralPurgeServiceException) e;
                        result.setDownIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resolvePurge_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.resolvePurge(args.token, args.purgeId, args.notes,resultHandler);
      }
    }

    public static class getAgeOffEventState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAgeOffEventState_args, List<CentralAgeOffEventState>> {
      public getAgeOffEventState() {
        super("getAgeOffEventState");
      }

      public getAgeOffEventState_args getEmptyArgsInstance() {
        return new getAgeOffEventState_args();
      }

      public AsyncMethodCallback<List<CentralAgeOffEventState>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<CentralAgeOffEventState>>() { 
          public void onComplete(List<CentralAgeOffEventState> o) {
            getAgeOffEventState_result result = new getAgeOffEventState_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAgeOffEventState_result result = new getAgeOffEventState_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof CentralPurgeServiceException) {
                        result.down = (CentralPurgeServiceException) e;
                        result.setDownIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAgeOffEventState_args args, org.apache.thrift.async.AsyncMethodCallback<List<CentralAgeOffEventState>> resultHandler) throws TException {
        iface.getAgeOffEventState(args.token, args.ageOffEventIds,resultHandler);
      }
    }

    public static class getAllAgeOffEvents<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllAgeOffEvents_args, List<Long>> {
      public getAllAgeOffEvents() {
        super("getAllAgeOffEvents");
      }

      public getAllAgeOffEvents_args getEmptyArgsInstance() {
        return new getAllAgeOffEvents_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getAllAgeOffEvents_result result = new getAllAgeOffEvents_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllAgeOffEvents_result result = new getAllAgeOffEvents_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof CentralPurgeServiceException) {
                        result.down = (CentralPurgeServiceException) e;
                        result.setDownIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllAgeOffEvents_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getAllAgeOffEvents(args.token,resultHandler);
      }
    }

    public static class resolveAgeOffEvent<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resolveAgeOffEvent_args, Void> {
      public resolveAgeOffEvent() {
        super("resolveAgeOffEvent");
      }

      public resolveAgeOffEvent_args getEmptyArgsInstance() {
        return new resolveAgeOffEvent_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            resolveAgeOffEvent_result result = new resolveAgeOffEvent_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            resolveAgeOffEvent_result result = new resolveAgeOffEvent_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof CentralPurgeServiceException) {
                        result.down = (CentralPurgeServiceException) e;
                        result.setDownIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resolveAgeOffEvent_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.resolveAgeOffEvent(args.token, args.ageOffEventId, args.notes,resultHandler);
      }
    }

    public static class getPagedSortedFilteredPurgeStates<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPagedSortedFilteredPurgeStates_args, CentralPurgeQueryResults> {
      public getPagedSortedFilteredPurgeStates() {
        super("getPagedSortedFilteredPurgeStates");
      }

      public getPagedSortedFilteredPurgeStates_args getEmptyArgsInstance() {
        return new getPagedSortedFilteredPurgeStates_args();
      }

      public AsyncMethodCallback<CentralPurgeQueryResults> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CentralPurgeQueryResults>() { 
          public void onComplete(CentralPurgeQueryResults o) {
            getPagedSortedFilteredPurgeStates_result result = new getPagedSortedFilteredPurgeStates_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPagedSortedFilteredPurgeStates_result result = new getPagedSortedFilteredPurgeStates_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof CentralPurgeServiceException) {
                        result.down = (CentralPurgeServiceException) e;
                        result.setDownIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPagedSortedFilteredPurgeStates_args args, org.apache.thrift.async.AsyncMethodCallback<CentralPurgeQueryResults> resultHandler) throws TException {
        iface.getPagedSortedFilteredPurgeStates(args.token, args.statuses, args.pageNum, args.numPerPage,resultHandler);
      }
    }

    public static class getPagedSortedFilteredAgeOffEventStates<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPagedSortedFilteredAgeOffEventStates_args, CentralAgeOffEventQueryResults> {
      public getPagedSortedFilteredAgeOffEventStates() {
        super("getPagedSortedFilteredAgeOffEventStates");
      }

      public getPagedSortedFilteredAgeOffEventStates_args getEmptyArgsInstance() {
        return new getPagedSortedFilteredAgeOffEventStates_args();
      }

      public AsyncMethodCallback<CentralAgeOffEventQueryResults> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<CentralAgeOffEventQueryResults>() { 
          public void onComplete(CentralAgeOffEventQueryResults o) {
            getPagedSortedFilteredAgeOffEventStates_result result = new getPagedSortedFilteredAgeOffEventStates_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getPagedSortedFilteredAgeOffEventStates_result result = new getPagedSortedFilteredAgeOffEventStates_result();
            if (e instanceof ezbake.base.thrift.EzSecurityTokenException) {
                        result.security = (ezbake.base.thrift.EzSecurityTokenException) e;
                        result.setSecurityIsSet(true);
                        msg = result;
            }
            else             if (e instanceof CentralPurgeServiceException) {
                        result.down = (CentralPurgeServiceException) e;
                        result.setDownIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPagedSortedFilteredAgeOffEventStates_args args, org.apache.thrift.async.AsyncMethodCallback<CentralAgeOffEventQueryResults> resultHandler) throws TException {
        iface.getPagedSortedFilteredAgeOffEventStates(args.token, args.statuses, args.pageNum, args.numPerPage,resultHandler);
      }
    }

  }

  public static class beginPurge_args implements org.apache.thrift.TBase<beginPurge_args, beginPurge_args._Fields>, java.io.Serializable, Cloneable, Comparable<beginPurge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginPurge_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField URIS_FIELD_DESC = new org.apache.thrift.protocol.TField("uris", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginPurge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginPurge_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required
    public List<String> uris; // required
    public String name; // required
    public String description; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      URIS((short)2, "uris"),
      NAME((short)3, "name"),
      DESCRIPTION((short)4, "description");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // URIS
            return URIS;
          case 3: // NAME
            return NAME;
          case 4: // DESCRIPTION
            return DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.URIS, new org.apache.thrift.meta_data.FieldMetaData("uris", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginPurge_args.class, metaDataMap);
    }

    public beginPurge_args() {
    }

    public beginPurge_args(
      ezbake.base.thrift.EzSecurityToken token,
      List<String> uris,
      String name,
      String description)
    {
      this();
      this.token = token;
      this.uris = uris;
      this.name = name;
      this.description = description;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginPurge_args(beginPurge_args other) {
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
      if (other.isSetUris()) {
        List<String> __this__uris = new ArrayList<String>(other.uris);
        this.uris = __this__uris;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
    }

    public beginPurge_args deepCopy() {
      return new beginPurge_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.uris = null;
      this.name = null;
      this.description = null;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public beginPurge_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public int getUrisSize() {
      return (this.uris == null) ? 0 : this.uris.size();
    }

    public java.util.Iterator<String> getUrisIterator() {
      return (this.uris == null) ? null : this.uris.iterator();
    }

    public void addToUris(String elem) {
      if (this.uris == null) {
        this.uris = new ArrayList<String>();
      }
      this.uris.add(elem);
    }

    public List<String> getUris() {
      return this.uris;
    }

    public beginPurge_args setUris(List<String> uris) {
      this.uris = uris;
      return this;
    }

    public void unsetUris() {
      this.uris = null;
    }

    /** Returns true if field uris is set (has been assigned a value) and false otherwise */
    public boolean isSetUris() {
      return this.uris != null;
    }

    public void setUrisIsSet(boolean value) {
      if (!value) {
        this.uris = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public beginPurge_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public beginPurge_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case URIS:
        if (value == null) {
          unsetUris();
        } else {
          setUris((List<String>)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case URIS:
        return getUris();

      case NAME:
        return getName();

      case DESCRIPTION:
        return getDescription();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case URIS:
        return isSetUris();
      case NAME:
        return isSetName();
      case DESCRIPTION:
        return isSetDescription();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginPurge_args)
        return this.equals((beginPurge_args)that);
      return false;
    }

    public boolean equals(beginPurge_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_uris = true && this.isSetUris();
      boolean that_present_uris = true && that.isSetUris();
      if (this_present_uris || that_present_uris) {
        if (!(this_present_uris && that_present_uris))
          return false;
        if (!this.uris.equals(that.uris))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_token = true && (isSetToken());
      builder.append(present_token);
      if (present_token)
        builder.append(token);

      boolean present_uris = true && (isSetUris());
      builder.append(present_uris);
      if (present_uris)
        builder.append(uris);

      boolean present_name = true && (isSetName());
      builder.append(present_name);
      if (present_name)
        builder.append(name);

      boolean present_description = true && (isSetDescription());
      builder.append(present_description);
      if (present_description)
        builder.append(description);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(beginPurge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUris()).compareTo(other.isSetUris());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUris()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uris, other.uris);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginPurge_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uris:");
      if (this.uris == null) {
        sb.append("null");
      } else {
        sb.append(this.uris);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (uris == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'uris' was not present! Struct: " + toString());
      }
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      if (description == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'description' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginPurge_argsStandardSchemeFactory implements SchemeFactory {
      public beginPurge_argsStandardScheme getScheme() {
        return new beginPurge_argsStandardScheme();
      }
    }

    private static class beginPurge_argsStandardScheme extends StandardScheme<beginPurge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginPurge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URIS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                  struct.uris = new ArrayList<String>(_list62.size);
                  for (int _i63 = 0; _i63 < _list62.size; ++_i63)
                  {
                    String _elem64;
                    _elem64 = iprot.readString();
                    struct.uris.add(_elem64);
                  }
                  iprot.readListEnd();
                }
                struct.setUrisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginPurge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uris != null) {
          oprot.writeFieldBegin(URIS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.uris.size()));
            for (String _iter65 : struct.uris)
            {
              oprot.writeString(_iter65);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginPurge_argsTupleSchemeFactory implements SchemeFactory {
      public beginPurge_argsTupleScheme getScheme() {
        return new beginPurge_argsTupleScheme();
      }
    }

    private static class beginPurge_argsTupleScheme extends TupleScheme<beginPurge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginPurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.token.write(oprot);
        {
          oprot.writeI32(struct.uris.size());
          for (String _iter66 : struct.uris)
          {
            oprot.writeString(_iter66);
          }
        }
        oprot.writeString(struct.name);
        oprot.writeString(struct.description);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginPurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = new ezbake.base.thrift.EzSecurityToken();
        struct.token.read(iprot);
        struct.setTokenIsSet(true);
        {
          org.apache.thrift.protocol.TList _list67 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.uris = new ArrayList<String>(_list67.size);
          for (int _i68 = 0; _i68 < _list67.size; ++_i68)
          {
            String _elem69;
            _elem69 = iprot.readString();
            struct.uris.add(_elem69);
          }
        }
        struct.setUrisIsSet(true);
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
    }

  }

  public static class beginPurge_result implements org.apache.thrift.TBase<beginPurge_result, beginPurge_result._Fields>, java.io.Serializable, Cloneable, Comparable<beginPurge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginPurge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("down", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginPurge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginPurge_resultTupleSchemeFactory());
    }

    public ezbake.services.provenance.thrift.PurgeInitiationResult success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public CentralPurgeServiceException down; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      DOWN((short)2, "down");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOWN
            return DOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.services.provenance.thrift.PurgeInitiationResult.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOWN, new org.apache.thrift.meta_data.FieldMetaData("down", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginPurge_result.class, metaDataMap);
    }

    public beginPurge_result() {
    }

    public beginPurge_result(
      ezbake.services.provenance.thrift.PurgeInitiationResult success,
      ezbake.base.thrift.EzSecurityTokenException security,
      CentralPurgeServiceException down)
    {
      this();
      this.success = success;
      this.security = security;
      this.down = down;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginPurge_result(beginPurge_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.services.provenance.thrift.PurgeInitiationResult(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDown()) {
        this.down = new CentralPurgeServiceException(other.down);
      }
    }

    public beginPurge_result deepCopy() {
      return new beginPurge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
      this.down = null;
    }

    public ezbake.services.provenance.thrift.PurgeInitiationResult getSuccess() {
      return this.success;
    }

    public beginPurge_result setSuccess(ezbake.services.provenance.thrift.PurgeInitiationResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public beginPurge_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public CentralPurgeServiceException getDown() {
      return this.down;
    }

    public beginPurge_result setDown(CentralPurgeServiceException down) {
      this.down = down;
      return this;
    }

    public void unsetDown() {
      this.down = null;
    }

    /** Returns true if field down is set (has been assigned a value) and false otherwise */
    public boolean isSetDown() {
      return this.down != null;
    }

    public void setDownIsSet(boolean value) {
      if (!value) {
        this.down = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.services.provenance.thrift.PurgeInitiationResult)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOWN:
        if (value == null) {
          unsetDown();
        } else {
          setDown((CentralPurgeServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      case DOWN:
        return getDown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case DOWN:
        return isSetDown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginPurge_result)
        return this.equals((beginPurge_result)that);
      return false;
    }

    public boolean equals(beginPurge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_down = true && this.isSetDown();
      boolean that_present_down = true && that.isSetDown();
      if (this_present_down || that_present_down) {
        if (!(this_present_down && that_present_down))
          return false;
        if (!this.down.equals(that.down))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_down = true && (isSetDown());
      builder.append(present_down);
      if (present_down)
        builder.append(down);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(beginPurge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDown()).compareTo(other.isSetDown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.down, other.down);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginPurge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("down:");
      if (this.down == null) {
        sb.append("null");
      } else {
        sb.append(this.down);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginPurge_resultStandardSchemeFactory implements SchemeFactory {
      public beginPurge_resultStandardScheme getScheme() {
        return new beginPurge_resultStandardScheme();
      }
    }

    private static class beginPurge_resultStandardScheme extends StandardScheme<beginPurge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginPurge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.services.provenance.thrift.PurgeInitiationResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOWN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.down = new CentralPurgeServiceException();
                struct.down.read(iprot);
                struct.setDownIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginPurge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.down != null) {
          oprot.writeFieldBegin(DOWN_FIELD_DESC);
          struct.down.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginPurge_resultTupleSchemeFactory implements SchemeFactory {
      public beginPurge_resultTupleScheme getScheme() {
        return new beginPurge_resultTupleScheme();
      }
    }

    private static class beginPurge_resultTupleScheme extends TupleScheme<beginPurge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginPurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetDown()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDown()) {
          struct.down.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginPurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ezbake.services.provenance.thrift.PurgeInitiationResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.down = new CentralPurgeServiceException();
          struct.down.read(iprot);
          struct.setDownIsSet(true);
        }
      }
    }

  }

  public static class beginVirusPurge_args implements org.apache.thrift.TBase<beginVirusPurge_args, beginVirusPurge_args._Fields>, java.io.Serializable, Cloneable, Comparable<beginVirusPurge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginVirusPurge_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField URIS_FIELD_DESC = new org.apache.thrift.protocol.TField("uris", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginVirusPurge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginVirusPurge_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required
    public List<String> uris; // required
    public String name; // required
    public String description; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      URIS((short)2, "uris"),
      NAME((short)3, "name"),
      DESCRIPTION((short)4, "description");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // URIS
            return URIS;
          case 3: // NAME
            return NAME;
          case 4: // DESCRIPTION
            return DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.URIS, new org.apache.thrift.meta_data.FieldMetaData("uris", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginVirusPurge_args.class, metaDataMap);
    }

    public beginVirusPurge_args() {
    }

    public beginVirusPurge_args(
      ezbake.base.thrift.EzSecurityToken token,
      List<String> uris,
      String name,
      String description)
    {
      this();
      this.token = token;
      this.uris = uris;
      this.name = name;
      this.description = description;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginVirusPurge_args(beginVirusPurge_args other) {
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
      if (other.isSetUris()) {
        List<String> __this__uris = new ArrayList<String>(other.uris);
        this.uris = __this__uris;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
    }

    public beginVirusPurge_args deepCopy() {
      return new beginVirusPurge_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.uris = null;
      this.name = null;
      this.description = null;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public beginVirusPurge_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public int getUrisSize() {
      return (this.uris == null) ? 0 : this.uris.size();
    }

    public java.util.Iterator<String> getUrisIterator() {
      return (this.uris == null) ? null : this.uris.iterator();
    }

    public void addToUris(String elem) {
      if (this.uris == null) {
        this.uris = new ArrayList<String>();
      }
      this.uris.add(elem);
    }

    public List<String> getUris() {
      return this.uris;
    }

    public beginVirusPurge_args setUris(List<String> uris) {
      this.uris = uris;
      return this;
    }

    public void unsetUris() {
      this.uris = null;
    }

    /** Returns true if field uris is set (has been assigned a value) and false otherwise */
    public boolean isSetUris() {
      return this.uris != null;
    }

    public void setUrisIsSet(boolean value) {
      if (!value) {
        this.uris = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public beginVirusPurge_args setName(String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public String getDescription() {
      return this.description;
    }

    public beginVirusPurge_args setDescription(String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case URIS:
        if (value == null) {
          unsetUris();
        } else {
          setUris((List<String>)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case URIS:
        return getUris();

      case NAME:
        return getName();

      case DESCRIPTION:
        return getDescription();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case URIS:
        return isSetUris();
      case NAME:
        return isSetName();
      case DESCRIPTION:
        return isSetDescription();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginVirusPurge_args)
        return this.equals((beginVirusPurge_args)that);
      return false;
    }

    public boolean equals(beginVirusPurge_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_uris = true && this.isSetUris();
      boolean that_present_uris = true && that.isSetUris();
      if (this_present_uris || that_present_uris) {
        if (!(this_present_uris && that_present_uris))
          return false;
        if (!this.uris.equals(that.uris))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_token = true && (isSetToken());
      builder.append(present_token);
      if (present_token)
        builder.append(token);

      boolean present_uris = true && (isSetUris());
      builder.append(present_uris);
      if (present_uris)
        builder.append(uris);

      boolean present_name = true && (isSetName());
      builder.append(present_name);
      if (present_name)
        builder.append(name);

      boolean present_description = true && (isSetDescription());
      builder.append(present_description);
      if (present_description)
        builder.append(description);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(beginVirusPurge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUris()).compareTo(other.isSetUris());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUris()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uris, other.uris);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginVirusPurge_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uris:");
      if (this.uris == null) {
        sb.append("null");
      } else {
        sb.append(this.uris);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (uris == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'uris' was not present! Struct: " + toString());
      }
      if (name == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
      }
      if (description == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'description' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginVirusPurge_argsStandardSchemeFactory implements SchemeFactory {
      public beginVirusPurge_argsStandardScheme getScheme() {
        return new beginVirusPurge_argsStandardScheme();
      }
    }

    private static class beginVirusPurge_argsStandardScheme extends StandardScheme<beginVirusPurge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginVirusPurge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // URIS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list70 = iprot.readListBegin();
                  struct.uris = new ArrayList<String>(_list70.size);
                  for (int _i71 = 0; _i71 < _list70.size; ++_i71)
                  {
                    String _elem72;
                    _elem72 = iprot.readString();
                    struct.uris.add(_elem72);
                  }
                  iprot.readListEnd();
                }
                struct.setUrisIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginVirusPurge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.uris != null) {
          oprot.writeFieldBegin(URIS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.uris.size()));
            for (String _iter73 : struct.uris)
            {
              oprot.writeString(_iter73);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginVirusPurge_argsTupleSchemeFactory implements SchemeFactory {
      public beginVirusPurge_argsTupleScheme getScheme() {
        return new beginVirusPurge_argsTupleScheme();
      }
    }

    private static class beginVirusPurge_argsTupleScheme extends TupleScheme<beginVirusPurge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginVirusPurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.token.write(oprot);
        {
          oprot.writeI32(struct.uris.size());
          for (String _iter74 : struct.uris)
          {
            oprot.writeString(_iter74);
          }
        }
        oprot.writeString(struct.name);
        oprot.writeString(struct.description);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginVirusPurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = new ezbake.base.thrift.EzSecurityToken();
        struct.token.read(iprot);
        struct.setTokenIsSet(true);
        {
          org.apache.thrift.protocol.TList _list75 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.uris = new ArrayList<String>(_list75.size);
          for (int _i76 = 0; _i76 < _list75.size; ++_i76)
          {
            String _elem77;
            _elem77 = iprot.readString();
            struct.uris.add(_elem77);
          }
        }
        struct.setUrisIsSet(true);
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
    }

  }

  public static class beginVirusPurge_result implements org.apache.thrift.TBase<beginVirusPurge_result, beginVirusPurge_result._Fields>, java.io.Serializable, Cloneable, Comparable<beginVirusPurge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginVirusPurge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("down", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginVirusPurge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginVirusPurge_resultTupleSchemeFactory());
    }

    public ezbake.services.provenance.thrift.PurgeInitiationResult success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public CentralPurgeServiceException down; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      DOWN((short)2, "down");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOWN
            return DOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.services.provenance.thrift.PurgeInitiationResult.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOWN, new org.apache.thrift.meta_data.FieldMetaData("down", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginVirusPurge_result.class, metaDataMap);
    }

    public beginVirusPurge_result() {
    }

    public beginVirusPurge_result(
      ezbake.services.provenance.thrift.PurgeInitiationResult success,
      ezbake.base.thrift.EzSecurityTokenException security,
      CentralPurgeServiceException down)
    {
      this();
      this.success = success;
      this.security = security;
      this.down = down;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginVirusPurge_result(beginVirusPurge_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.services.provenance.thrift.PurgeInitiationResult(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDown()) {
        this.down = new CentralPurgeServiceException(other.down);
      }
    }

    public beginVirusPurge_result deepCopy() {
      return new beginVirusPurge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
      this.down = null;
    }

    public ezbake.services.provenance.thrift.PurgeInitiationResult getSuccess() {
      return this.success;
    }

    public beginVirusPurge_result setSuccess(ezbake.services.provenance.thrift.PurgeInitiationResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public beginVirusPurge_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public CentralPurgeServiceException getDown() {
      return this.down;
    }

    public beginVirusPurge_result setDown(CentralPurgeServiceException down) {
      this.down = down;
      return this;
    }

    public void unsetDown() {
      this.down = null;
    }

    /** Returns true if field down is set (has been assigned a value) and false otherwise */
    public boolean isSetDown() {
      return this.down != null;
    }

    public void setDownIsSet(boolean value) {
      if (!value) {
        this.down = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.services.provenance.thrift.PurgeInitiationResult)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOWN:
        if (value == null) {
          unsetDown();
        } else {
          setDown((CentralPurgeServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      case DOWN:
        return getDown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case DOWN:
        return isSetDown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginVirusPurge_result)
        return this.equals((beginVirusPurge_result)that);
      return false;
    }

    public boolean equals(beginVirusPurge_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_down = true && this.isSetDown();
      boolean that_present_down = true && that.isSetDown();
      if (this_present_down || that_present_down) {
        if (!(this_present_down && that_present_down))
          return false;
        if (!this.down.equals(that.down))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_down = true && (isSetDown());
      builder.append(present_down);
      if (present_down)
        builder.append(down);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(beginVirusPurge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDown()).compareTo(other.isSetDown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.down, other.down);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginVirusPurge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("down:");
      if (this.down == null) {
        sb.append("null");
      } else {
        sb.append(this.down);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginVirusPurge_resultStandardSchemeFactory implements SchemeFactory {
      public beginVirusPurge_resultStandardScheme getScheme() {
        return new beginVirusPurge_resultStandardScheme();
      }
    }

    private static class beginVirusPurge_resultStandardScheme extends StandardScheme<beginVirusPurge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginVirusPurge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.services.provenance.thrift.PurgeInitiationResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOWN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.down = new CentralPurgeServiceException();
                struct.down.read(iprot);
                struct.setDownIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginVirusPurge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.down != null) {
          oprot.writeFieldBegin(DOWN_FIELD_DESC);
          struct.down.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginVirusPurge_resultTupleSchemeFactory implements SchemeFactory {
      public beginVirusPurge_resultTupleScheme getScheme() {
        return new beginVirusPurge_resultTupleScheme();
      }
    }

    private static class beginVirusPurge_resultTupleScheme extends TupleScheme<beginVirusPurge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginVirusPurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetDown()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDown()) {
          struct.down.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginVirusPurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new ezbake.services.provenance.thrift.PurgeInitiationResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.down = new CentralPurgeServiceException();
          struct.down.read(iprot);
          struct.setDownIsSet(true);
        }
      }
    }

  }

  public static class getPurgeState_args implements org.apache.thrift.TBase<getPurgeState_args, getPurgeState_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPurgeState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPurgeState_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PURGE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("purgeIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPurgeState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPurgeState_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required
    public List<Long> purgeIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      PURGE_IDS((short)2, "purgeIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // PURGE_IDS
            return PURGE_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.PURGE_IDS, new org.apache.thrift.meta_data.FieldMetaData("purgeIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPurgeState_args.class, metaDataMap);
    }

    public getPurgeState_args() {
    }

    public getPurgeState_args(
      ezbake.base.thrift.EzSecurityToken token,
      List<Long> purgeIds)
    {
      this();
      this.token = token;
      this.purgeIds = purgeIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPurgeState_args(getPurgeState_args other) {
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
      if (other.isSetPurgeIds()) {
        List<Long> __this__purgeIds = new ArrayList<Long>(other.purgeIds);
        this.purgeIds = __this__purgeIds;
      }
    }

    public getPurgeState_args deepCopy() {
      return new getPurgeState_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.purgeIds = null;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getPurgeState_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public int getPurgeIdsSize() {
      return (this.purgeIds == null) ? 0 : this.purgeIds.size();
    }

    public java.util.Iterator<Long> getPurgeIdsIterator() {
      return (this.purgeIds == null) ? null : this.purgeIds.iterator();
    }

    public void addToPurgeIds(long elem) {
      if (this.purgeIds == null) {
        this.purgeIds = new ArrayList<Long>();
      }
      this.purgeIds.add(elem);
    }

    public List<Long> getPurgeIds() {
      return this.purgeIds;
    }

    public getPurgeState_args setPurgeIds(List<Long> purgeIds) {
      this.purgeIds = purgeIds;
      return this;
    }

    public void unsetPurgeIds() {
      this.purgeIds = null;
    }

    /** Returns true if field purgeIds is set (has been assigned a value) and false otherwise */
    public boolean isSetPurgeIds() {
      return this.purgeIds != null;
    }

    public void setPurgeIdsIsSet(boolean value) {
      if (!value) {
        this.purgeIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case PURGE_IDS:
        if (value == null) {
          unsetPurgeIds();
        } else {
          setPurgeIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case PURGE_IDS:
        return getPurgeIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case PURGE_IDS:
        return isSetPurgeIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPurgeState_args)
        return this.equals((getPurgeState_args)that);
      return false;
    }

    public boolean equals(getPurgeState_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_purgeIds = true && this.isSetPurgeIds();
      boolean that_present_purgeIds = true && that.isSetPurgeIds();
      if (this_present_purgeIds || that_present_purgeIds) {
        if (!(this_present_purgeIds && that_present_purgeIds))
          return false;
        if (!this.purgeIds.equals(that.purgeIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_token = true && (isSetToken());
      builder.append(present_token);
      if (present_token)
        builder.append(token);

      boolean present_purgeIds = true && (isSetPurgeIds());
      builder.append(present_purgeIds);
      if (present_purgeIds)
        builder.append(purgeIds);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getPurgeState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPurgeIds()).compareTo(other.isSetPurgeIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurgeIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purgeIds, other.purgeIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPurgeState_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("purgeIds:");
      if (this.purgeIds == null) {
        sb.append("null");
      } else {
        sb.append(this.purgeIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPurgeState_argsStandardSchemeFactory implements SchemeFactory {
      public getPurgeState_argsStandardScheme getScheme() {
        return new getPurgeState_argsStandardScheme();
      }
    }

    private static class getPurgeState_argsStandardScheme extends StandardScheme<getPurgeState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPurgeState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PURGE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list78 = iprot.readListBegin();
                  struct.purgeIds = new ArrayList<Long>(_list78.size);
                  for (int _i79 = 0; _i79 < _list78.size; ++_i79)
                  {
                    long _elem80;
                    _elem80 = iprot.readI64();
                    struct.purgeIds.add(_elem80);
                  }
                  iprot.readListEnd();
                }
                struct.setPurgeIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPurgeState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.purgeIds != null) {
          oprot.writeFieldBegin(PURGE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.purgeIds.size()));
            for (long _iter81 : struct.purgeIds)
            {
              oprot.writeI64(_iter81);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPurgeState_argsTupleSchemeFactory implements SchemeFactory {
      public getPurgeState_argsTupleScheme getScheme() {
        return new getPurgeState_argsTupleScheme();
      }
    }

    private static class getPurgeState_argsTupleScheme extends TupleScheme<getPurgeState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPurgeState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.token.write(oprot);
        BitSet optionals = new BitSet();
        if (struct.isSetPurgeIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPurgeIds()) {
          {
            oprot.writeI32(struct.purgeIds.size());
            for (long _iter82 : struct.purgeIds)
            {
              oprot.writeI64(_iter82);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPurgeState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = new ezbake.base.thrift.EzSecurityToken();
        struct.token.read(iprot);
        struct.setTokenIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list83 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.purgeIds = new ArrayList<Long>(_list83.size);
            for (int _i84 = 0; _i84 < _list83.size; ++_i84)
            {
              long _elem85;
              _elem85 = iprot.readI64();
              struct.purgeIds.add(_elem85);
            }
          }
          struct.setPurgeIdsIsSet(true);
        }
      }
    }

  }

  public static class getPurgeState_result implements org.apache.thrift.TBase<getPurgeState_result, getPurgeState_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPurgeState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPurgeState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("down", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPurgeState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPurgeState_resultTupleSchemeFactory());
    }

    public List<CentralPurgeState> success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public CentralPurgeServiceException down; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      DOWN((short)2, "down");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOWN
            return DOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CentralPurgeState.class))));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOWN, new org.apache.thrift.meta_data.FieldMetaData("down", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPurgeState_result.class, metaDataMap);
    }

    public getPurgeState_result() {
    }

    public getPurgeState_result(
      List<CentralPurgeState> success,
      ezbake.base.thrift.EzSecurityTokenException security,
      CentralPurgeServiceException down)
    {
      this();
      this.success = success;
      this.security = security;
      this.down = down;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPurgeState_result(getPurgeState_result other) {
      if (other.isSetSuccess()) {
        List<CentralPurgeState> __this__success = new ArrayList<CentralPurgeState>(other.success.size());
        for (CentralPurgeState other_element : other.success) {
          __this__success.add(new CentralPurgeState(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDown()) {
        this.down = new CentralPurgeServiceException(other.down);
      }
    }

    public getPurgeState_result deepCopy() {
      return new getPurgeState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
      this.down = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CentralPurgeState> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CentralPurgeState elem) {
      if (this.success == null) {
        this.success = new ArrayList<CentralPurgeState>();
      }
      this.success.add(elem);
    }

    public List<CentralPurgeState> getSuccess() {
      return this.success;
    }

    public getPurgeState_result setSuccess(List<CentralPurgeState> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getPurgeState_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public CentralPurgeServiceException getDown() {
      return this.down;
    }

    public getPurgeState_result setDown(CentralPurgeServiceException down) {
      this.down = down;
      return this;
    }

    public void unsetDown() {
      this.down = null;
    }

    /** Returns true if field down is set (has been assigned a value) and false otherwise */
    public boolean isSetDown() {
      return this.down != null;
    }

    public void setDownIsSet(boolean value) {
      if (!value) {
        this.down = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CentralPurgeState>)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOWN:
        if (value == null) {
          unsetDown();
        } else {
          setDown((CentralPurgeServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      case DOWN:
        return getDown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case DOWN:
        return isSetDown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPurgeState_result)
        return this.equals((getPurgeState_result)that);
      return false;
    }

    public boolean equals(getPurgeState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_down = true && this.isSetDown();
      boolean that_present_down = true && that.isSetDown();
      if (this_present_down || that_present_down) {
        if (!(this_present_down && that_present_down))
          return false;
        if (!this.down.equals(that.down))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_down = true && (isSetDown());
      builder.append(present_down);
      if (present_down)
        builder.append(down);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getPurgeState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDown()).compareTo(other.isSetDown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.down, other.down);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPurgeState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("down:");
      if (this.down == null) {
        sb.append("null");
      } else {
        sb.append(this.down);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPurgeState_resultStandardSchemeFactory implements SchemeFactory {
      public getPurgeState_resultStandardScheme getScheme() {
        return new getPurgeState_resultStandardScheme();
      }
    }

    private static class getPurgeState_resultStandardScheme extends StandardScheme<getPurgeState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPurgeState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list86 = iprot.readListBegin();
                  struct.success = new ArrayList<CentralPurgeState>(_list86.size);
                  for (int _i87 = 0; _i87 < _list86.size; ++_i87)
                  {
                    CentralPurgeState _elem88;
                    _elem88 = new CentralPurgeState();
                    _elem88.read(iprot);
                    struct.success.add(_elem88);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOWN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.down = new CentralPurgeServiceException();
                struct.down.read(iprot);
                struct.setDownIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPurgeState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CentralPurgeState _iter89 : struct.success)
            {
              _iter89.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.down != null) {
          oprot.writeFieldBegin(DOWN_FIELD_DESC);
          struct.down.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPurgeState_resultTupleSchemeFactory implements SchemeFactory {
      public getPurgeState_resultTupleScheme getScheme() {
        return new getPurgeState_resultTupleScheme();
      }
    }

    private static class getPurgeState_resultTupleScheme extends TupleScheme<getPurgeState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPurgeState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetDown()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CentralPurgeState _iter90 : struct.success)
            {
              _iter90.write(oprot);
            }
          }
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDown()) {
          struct.down.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPurgeState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list91 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CentralPurgeState>(_list91.size);
            for (int _i92 = 0; _i92 < _list91.size; ++_i92)
            {
              CentralPurgeState _elem93;
              _elem93 = new CentralPurgeState();
              _elem93.read(iprot);
              struct.success.add(_elem93);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.down = new CentralPurgeServiceException();
          struct.down.read(iprot);
          struct.setDownIsSet(true);
        }
      }
    }

  }

  public static class beginManualAgeOff_args implements org.apache.thrift.TBase<beginManualAgeOff_args, beginManualAgeOff_args._Fields>, java.io.Serializable, Cloneable, Comparable<beginManualAgeOff_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginManualAgeOff_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginManualAgeOff_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginManualAgeOff_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required
    public long ruleId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      RULE_ID((short)2, "ruleId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // RULE_ID
            return RULE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RULEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.RULE_ID, new org.apache.thrift.meta_data.FieldMetaData("ruleId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginManualAgeOff_args.class, metaDataMap);
    }

    public beginManualAgeOff_args() {
    }

    public beginManualAgeOff_args(
      ezbake.base.thrift.EzSecurityToken token,
      long ruleId)
    {
      this();
      this.token = token;
      this.ruleId = ruleId;
      setRuleIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginManualAgeOff_args(beginManualAgeOff_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
      this.ruleId = other.ruleId;
    }

    public beginManualAgeOff_args deepCopy() {
      return new beginManualAgeOff_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setRuleIdIsSet(false);
      this.ruleId = 0;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public beginManualAgeOff_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long getRuleId() {
      return this.ruleId;
    }

    public beginManualAgeOff_args setRuleId(long ruleId) {
      this.ruleId = ruleId;
      setRuleIdIsSet(true);
      return this;
    }

    public void unsetRuleId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RULEID_ISSET_ID);
    }

    /** Returns true if field ruleId is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleId() {
      return EncodingUtils.testBit(__isset_bitfield, __RULEID_ISSET_ID);
    }

    public void setRuleIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RULEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case RULE_ID:
        if (value == null) {
          unsetRuleId();
        } else {
          setRuleId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case RULE_ID:
        return Long.valueOf(getRuleId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case RULE_ID:
        return isSetRuleId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginManualAgeOff_args)
        return this.equals((beginManualAgeOff_args)that);
      return false;
    }

    public boolean equals(beginManualAgeOff_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ruleId = true;
      boolean that_present_ruleId = true;
      if (this_present_ruleId || that_present_ruleId) {
        if (!(this_present_ruleId && that_present_ruleId))
          return false;
        if (this.ruleId != that.ruleId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_token = true && (isSetToken());
      builder.append(present_token);
      if (present_token)
        builder.append(token);

      boolean present_ruleId = true;
      builder.append(present_ruleId);
      if (present_ruleId)
        builder.append(ruleId);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(beginManualAgeOff_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleId()).compareTo(other.isSetRuleId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleId, other.ruleId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginManualAgeOff_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleId:");
      sb.append(this.ruleId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'ruleId' because it's a primitive and you chose the non-beans generator.
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginManualAgeOff_argsStandardSchemeFactory implements SchemeFactory {
      public beginManualAgeOff_argsStandardScheme getScheme() {
        return new beginManualAgeOff_argsStandardScheme();
      }
    }

    private static class beginManualAgeOff_argsStandardScheme extends StandardScheme<beginManualAgeOff_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginManualAgeOff_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ruleId = iprot.readI64();
                struct.setRuleIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetRuleId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'ruleId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginManualAgeOff_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RULE_ID_FIELD_DESC);
        oprot.writeI64(struct.ruleId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginManualAgeOff_argsTupleSchemeFactory implements SchemeFactory {
      public beginManualAgeOff_argsTupleScheme getScheme() {
        return new beginManualAgeOff_argsTupleScheme();
      }
    }

    private static class beginManualAgeOff_argsTupleScheme extends TupleScheme<beginManualAgeOff_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginManualAgeOff_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.token.write(oprot);
        oprot.writeI64(struct.ruleId);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginManualAgeOff_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = new ezbake.base.thrift.EzSecurityToken();
        struct.token.read(iprot);
        struct.setTokenIsSet(true);
        struct.ruleId = iprot.readI64();
        struct.setRuleIdIsSet(true);
      }
    }

  }

  public static class beginManualAgeOff_result implements org.apache.thrift.TBase<beginManualAgeOff_result, beginManualAgeOff_result._Fields>, java.io.Serializable, Cloneable, Comparable<beginManualAgeOff_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("beginManualAgeOff_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RULE_NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleNotFound", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("down", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new beginManualAgeOff_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new beginManualAgeOff_resultTupleSchemeFactory());
    }

    public AgeOffEventInfo success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public ezbake.services.provenance.thrift.ProvenanceAgeOffRuleNotFoundException ruleNotFound; // required
    public CentralPurgeServiceException down; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      RULE_NOT_FOUND((short)2, "ruleNotFound"),
      DOWN((short)3, "down");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 2: // RULE_NOT_FOUND
            return RULE_NOT_FOUND;
          case 3: // DOWN
            return DOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AgeOffEventInfo.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.RULE_NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("ruleNotFound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOWN, new org.apache.thrift.meta_data.FieldMetaData("down", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(beginManualAgeOff_result.class, metaDataMap);
    }

    public beginManualAgeOff_result() {
    }

    public beginManualAgeOff_result(
      AgeOffEventInfo success,
      ezbake.base.thrift.EzSecurityTokenException security,
      ezbake.services.provenance.thrift.ProvenanceAgeOffRuleNotFoundException ruleNotFound,
      CentralPurgeServiceException down)
    {
      this();
      this.success = success;
      this.security = security;
      this.ruleNotFound = ruleNotFound;
      this.down = down;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public beginManualAgeOff_result(beginManualAgeOff_result other) {
      if (other.isSetSuccess()) {
        this.success = new AgeOffEventInfo(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetRuleNotFound()) {
        this.ruleNotFound = new ezbake.services.provenance.thrift.ProvenanceAgeOffRuleNotFoundException(other.ruleNotFound);
      }
      if (other.isSetDown()) {
        this.down = new CentralPurgeServiceException(other.down);
      }
    }

    public beginManualAgeOff_result deepCopy() {
      return new beginManualAgeOff_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
      this.ruleNotFound = null;
      this.down = null;
    }

    public AgeOffEventInfo getSuccess() {
      return this.success;
    }

    public beginManualAgeOff_result setSuccess(AgeOffEventInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public beginManualAgeOff_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public ezbake.services.provenance.thrift.ProvenanceAgeOffRuleNotFoundException getRuleNotFound() {
      return this.ruleNotFound;
    }

    public beginManualAgeOff_result setRuleNotFound(ezbake.services.provenance.thrift.ProvenanceAgeOffRuleNotFoundException ruleNotFound) {
      this.ruleNotFound = ruleNotFound;
      return this;
    }

    public void unsetRuleNotFound() {
      this.ruleNotFound = null;
    }

    /** Returns true if field ruleNotFound is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleNotFound() {
      return this.ruleNotFound != null;
    }

    public void setRuleNotFoundIsSet(boolean value) {
      if (!value) {
        this.ruleNotFound = null;
      }
    }

    public CentralPurgeServiceException getDown() {
      return this.down;
    }

    public beginManualAgeOff_result setDown(CentralPurgeServiceException down) {
      this.down = down;
      return this;
    }

    public void unsetDown() {
      this.down = null;
    }

    /** Returns true if field down is set (has been assigned a value) and false otherwise */
    public boolean isSetDown() {
      return this.down != null;
    }

    public void setDownIsSet(boolean value) {
      if (!value) {
        this.down = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AgeOffEventInfo)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case RULE_NOT_FOUND:
        if (value == null) {
          unsetRuleNotFound();
        } else {
          setRuleNotFound((ezbake.services.provenance.thrift.ProvenanceAgeOffRuleNotFoundException)value);
        }
        break;

      case DOWN:
        if (value == null) {
          unsetDown();
        } else {
          setDown((CentralPurgeServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      case RULE_NOT_FOUND:
        return getRuleNotFound();

      case DOWN:
        return getDown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case RULE_NOT_FOUND:
        return isSetRuleNotFound();
      case DOWN:
        return isSetDown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof beginManualAgeOff_result)
        return this.equals((beginManualAgeOff_result)that);
      return false;
    }

    public boolean equals(beginManualAgeOff_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_ruleNotFound = true && this.isSetRuleNotFound();
      boolean that_present_ruleNotFound = true && that.isSetRuleNotFound();
      if (this_present_ruleNotFound || that_present_ruleNotFound) {
        if (!(this_present_ruleNotFound && that_present_ruleNotFound))
          return false;
        if (!this.ruleNotFound.equals(that.ruleNotFound))
          return false;
      }

      boolean this_present_down = true && this.isSetDown();
      boolean that_present_down = true && that.isSetDown();
      if (this_present_down || that_present_down) {
        if (!(this_present_down && that_present_down))
          return false;
        if (!this.down.equals(that.down))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_ruleNotFound = true && (isSetRuleNotFound());
      builder.append(present_ruleNotFound);
      if (present_ruleNotFound)
        builder.append(ruleNotFound);

      boolean present_down = true && (isSetDown());
      builder.append(present_down);
      if (present_down)
        builder.append(down);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(beginManualAgeOff_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleNotFound()).compareTo(other.isSetRuleNotFound());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleNotFound()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleNotFound, other.ruleNotFound);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDown()).compareTo(other.isSetDown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.down, other.down);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("beginManualAgeOff_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleNotFound:");
      if (this.ruleNotFound == null) {
        sb.append("null");
      } else {
        sb.append(this.ruleNotFound);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("down:");
      if (this.down == null) {
        sb.append("null");
      } else {
        sb.append(this.down);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class beginManualAgeOff_resultStandardSchemeFactory implements SchemeFactory {
      public beginManualAgeOff_resultStandardScheme getScheme() {
        return new beginManualAgeOff_resultStandardScheme();
      }
    }

    private static class beginManualAgeOff_resultStandardScheme extends StandardScheme<beginManualAgeOff_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, beginManualAgeOff_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AgeOffEventInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RULE_NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ruleNotFound = new ezbake.services.provenance.thrift.ProvenanceAgeOffRuleNotFoundException();
                struct.ruleNotFound.read(iprot);
                struct.setRuleNotFoundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DOWN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.down = new CentralPurgeServiceException();
                struct.down.read(iprot);
                struct.setDownIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, beginManualAgeOff_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ruleNotFound != null) {
          oprot.writeFieldBegin(RULE_NOT_FOUND_FIELD_DESC);
          struct.ruleNotFound.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.down != null) {
          oprot.writeFieldBegin(DOWN_FIELD_DESC);
          struct.down.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class beginManualAgeOff_resultTupleSchemeFactory implements SchemeFactory {
      public beginManualAgeOff_resultTupleScheme getScheme() {
        return new beginManualAgeOff_resultTupleScheme();
      }
    }

    private static class beginManualAgeOff_resultTupleScheme extends TupleScheme<beginManualAgeOff_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, beginManualAgeOff_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetRuleNotFound()) {
          optionals.set(2);
        }
        if (struct.isSetDown()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetRuleNotFound()) {
          struct.ruleNotFound.write(oprot);
        }
        if (struct.isSetDown()) {
          struct.down.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, beginManualAgeOff_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new AgeOffEventInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ruleNotFound = new ezbake.services.provenance.thrift.ProvenanceAgeOffRuleNotFoundException();
          struct.ruleNotFound.read(iprot);
          struct.setRuleNotFoundIsSet(true);
        }
        if (incoming.get(3)) {
          struct.down = new CentralPurgeServiceException();
          struct.down.read(iprot);
          struct.setDownIsSet(true);
        }
      }
    }

  }

  public static class updatePurge_args implements org.apache.thrift.TBase<updatePurge_args, updatePurge_args._Fields>, java.io.Serializable, Cloneable, Comparable<updatePurge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePurge_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField APPLICATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("applicationName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePurge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePurge_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required
    public ezbake.base.thrift.PurgeState state; // required
    public String applicationName; // required
    public String serviceName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      STATE((short)2, "state"),
      APPLICATION_NAME((short)3, "applicationName"),
      SERVICE_NAME((short)4, "serviceName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // STATE
            return STATE;
          case 3: // APPLICATION_NAME
            return APPLICATION_NAME;
          case 4: // SERVICE_NAME
            return SERVICE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.PurgeState.class)));
      tmpMap.put(_Fields.APPLICATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("applicationName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePurge_args.class, metaDataMap);
    }

    public updatePurge_args() {
    }

    public updatePurge_args(
      ezbake.base.thrift.EzSecurityToken token,
      ezbake.base.thrift.PurgeState state,
      String applicationName,
      String serviceName)
    {
      this();
      this.token = token;
      this.state = state;
      this.applicationName = applicationName;
      this.serviceName = serviceName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePurge_args(updatePurge_args other) {
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
      if (other.isSetState()) {
        this.state = new ezbake.base.thrift.PurgeState(other.state);
      }
      if (other.isSetApplicationName()) {
        this.applicationName = other.applicationName;
      }
      if (other.isSetServiceName()) {
        this.serviceName = other.serviceName;
      }
    }

    public updatePurge_args deepCopy() {
      return new updatePurge_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.state = null;
      this.applicationName = null;
      this.serviceName = null;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public updatePurge_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public ezbake.base.thrift.PurgeState getState() {
      return this.state;
    }

    public updatePurge_args setState(ezbake.base.thrift.PurgeState state) {
      this.state = state;
      return this;
    }

    public void unsetState() {
      this.state = null;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return this.state != null;
    }

    public void setStateIsSet(boolean value) {
      if (!value) {
        this.state = null;
      }
    }

    public String getApplicationName() {
      return this.applicationName;
    }

    public updatePurge_args setApplicationName(String applicationName) {
      this.applicationName = applicationName;
      return this;
    }

    public void unsetApplicationName() {
      this.applicationName = null;
    }

    /** Returns true if field applicationName is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationName() {
      return this.applicationName != null;
    }

    public void setApplicationNameIsSet(boolean value) {
      if (!value) {
        this.applicationName = null;
      }
    }

    public String getServiceName() {
      return this.serviceName;
    }

    public updatePurge_args setServiceName(String serviceName) {
      this.serviceName = serviceName;
      return this;
    }

    public void unsetServiceName() {
      this.serviceName = null;
    }

    /** Returns true if field serviceName is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceName() {
      return this.serviceName != null;
    }

    public void setServiceNameIsSet(boolean value) {
      if (!value) {
        this.serviceName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((ezbake.base.thrift.PurgeState)value);
        }
        break;

      case APPLICATION_NAME:
        if (value == null) {
          unsetApplicationName();
        } else {
          setApplicationName((String)value);
        }
        break;

      case SERVICE_NAME:
        if (value == null) {
          unsetServiceName();
        } else {
          setServiceName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case STATE:
        return getState();

      case APPLICATION_NAME:
        return getApplicationName();

      case SERVICE_NAME:
        return getServiceName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case STATE:
        return isSetState();
      case APPLICATION_NAME:
        return isSetApplicationName();
      case SERVICE_NAME:
        return isSetServiceName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePurge_args)
        return this.equals((updatePurge_args)that);
      return false;
    }

    public boolean equals(updatePurge_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_state = true && this.isSetState();
      boolean that_present_state = true && that.isSetState();
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (!this.state.equals(that.state))
          return false;
      }

      boolean this_present_applicationName = true && this.isSetApplicationName();
      boolean that_present_applicationName = true && that.isSetApplicationName();
      if (this_present_applicationName || that_present_applicationName) {
        if (!(this_present_applicationName && that_present_applicationName))
          return false;
        if (!this.applicationName.equals(that.applicationName))
          return false;
      }

      boolean this_present_serviceName = true && this.isSetServiceName();
      boolean that_present_serviceName = true && that.isSetServiceName();
      if (this_present_serviceName || that_present_serviceName) {
        if (!(this_present_serviceName && that_present_serviceName))
          return false;
        if (!this.serviceName.equals(that.serviceName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_token = true && (isSetToken());
      builder.append(present_token);
      if (present_token)
        builder.append(token);

      boolean present_state = true && (isSetState());
      builder.append(present_state);
      if (present_state)
        builder.append(state);

      boolean present_applicationName = true && (isSetApplicationName());
      builder.append(present_applicationName);
      if (present_applicationName)
        builder.append(applicationName);

      boolean present_serviceName = true && (isSetServiceName());
      builder.append(present_serviceName);
      if (present_serviceName)
        builder.append(serviceName);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(updatePurge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApplicationName()).compareTo(other.isSetApplicationName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applicationName, other.applicationName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(other.isSetServiceName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, other.serviceName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePurge_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applicationName:");
      if (this.applicationName == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceName:");
      if (this.serviceName == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      if (state == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'state' was not present! Struct: " + toString());
      }
      if (applicationName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applicationName' was not present! Struct: " + toString());
      }
      if (serviceName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'serviceName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
      if (state != null) {
        state.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePurge_argsStandardSchemeFactory implements SchemeFactory {
      public updatePurge_argsStandardScheme getScheme() {
        return new updatePurge_argsStandardScheme();
      }
    }

    private static class updatePurge_argsStandardScheme extends StandardScheme<updatePurge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePurge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.state = new ezbake.base.thrift.PurgeState();
                struct.state.read(iprot);
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APPLICATION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applicationName = iprot.readString();
                struct.setApplicationNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SERVICE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.serviceName = iprot.readString();
                struct.setServiceNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePurge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.state != null) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          struct.state.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applicationName != null) {
          oprot.writeFieldBegin(APPLICATION_NAME_FIELD_DESC);
          oprot.writeString(struct.applicationName);
          oprot.writeFieldEnd();
        }
        if (struct.serviceName != null) {
          oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
          oprot.writeString(struct.serviceName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePurge_argsTupleSchemeFactory implements SchemeFactory {
      public updatePurge_argsTupleScheme getScheme() {
        return new updatePurge_argsTupleScheme();
      }
    }

    private static class updatePurge_argsTupleScheme extends TupleScheme<updatePurge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.token.write(oprot);
        struct.state.write(oprot);
        oprot.writeString(struct.applicationName);
        oprot.writeString(struct.serviceName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = new ezbake.base.thrift.EzSecurityToken();
        struct.token.read(iprot);
        struct.setTokenIsSet(true);
        struct.state = new ezbake.base.thrift.PurgeState();
        struct.state.read(iprot);
        struct.setStateIsSet(true);
        struct.applicationName = iprot.readString();
        struct.setApplicationNameIsSet(true);
        struct.serviceName = iprot.readString();
        struct.setServiceNameIsSet(true);
      }
    }

  }

  public static class updatePurge_result implements org.apache.thrift.TBase<updatePurge_result, updatePurge_result._Fields>, java.io.Serializable, Cloneable, Comparable<updatePurge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updatePurge_result");

    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("down", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updatePurge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updatePurge_resultTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public CentralPurgeServiceException down; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY((short)1, "security"),
      DOWN((short)2, "down");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOWN
            return DOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOWN, new org.apache.thrift.meta_data.FieldMetaData("down", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updatePurge_result.class, metaDataMap);
    }

    public updatePurge_result() {
    }

    public updatePurge_result(
      ezbake.base.thrift.EzSecurityTokenException security,
      CentralPurgeServiceException down)
    {
      this();
      this.security = security;
      this.down = down;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updatePurge_result(updatePurge_result other) {
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDown()) {
        this.down = new CentralPurgeServiceException(other.down);
      }
    }

    public updatePurge_result deepCopy() {
      return new updatePurge_result(this);
    }

    @Override
    public void clear() {
      this.security = null;
      this.down = null;
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public updatePurge_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public CentralPurgeServiceException getDown() {
      return this.down;
    }

    public updatePurge_result setDown(CentralPurgeServiceException down) {
      this.down = down;
      return this;
    }

    public void unsetDown() {
      this.down = null;
    }

    /** Returns true if field down is set (has been assigned a value) and false otherwise */
    public boolean isSetDown() {
      return this.down != null;
    }

    public void setDownIsSet(boolean value) {
      if (!value) {
        this.down = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOWN:
        if (value == null) {
          unsetDown();
        } else {
          setDown((CentralPurgeServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY:
        return getSecurity();

      case DOWN:
        return getDown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY:
        return isSetSecurity();
      case DOWN:
        return isSetDown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updatePurge_result)
        return this.equals((updatePurge_result)that);
      return false;
    }

    public boolean equals(updatePurge_result that) {
      if (that == null)
        return false;

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_down = true && this.isSetDown();
      boolean that_present_down = true && that.isSetDown();
      if (this_present_down || that_present_down) {
        if (!(this_present_down && that_present_down))
          return false;
        if (!this.down.equals(that.down))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_down = true && (isSetDown());
      builder.append(present_down);
      if (present_down)
        builder.append(down);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(updatePurge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDown()).compareTo(other.isSetDown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.down, other.down);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updatePurge_result(");
      boolean first = true;

      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("down:");
      if (this.down == null) {
        sb.append("null");
      } else {
        sb.append(this.down);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updatePurge_resultStandardSchemeFactory implements SchemeFactory {
      public updatePurge_resultStandardScheme getScheme() {
        return new updatePurge_resultStandardScheme();
      }
    }

    private static class updatePurge_resultStandardScheme extends StandardScheme<updatePurge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updatePurge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOWN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.down = new CentralPurgeServiceException();
                struct.down.read(iprot);
                struct.setDownIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updatePurge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.down != null) {
          oprot.writeFieldBegin(DOWN_FIELD_DESC);
          struct.down.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updatePurge_resultTupleSchemeFactory implements SchemeFactory {
      public updatePurge_resultTupleScheme getScheme() {
        return new updatePurge_resultTupleScheme();
      }
    }

    private static class updatePurge_resultTupleScheme extends TupleScheme<updatePurge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updatePurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurity()) {
          optionals.set(0);
        }
        if (struct.isSetDown()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDown()) {
          struct.down.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updatePurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(1)) {
          struct.down = new CentralPurgeServiceException();
          struct.down.read(iprot);
          struct.setDownIsSet(true);
        }
      }
    }

  }

  public static class resolvePurge_args implements org.apache.thrift.TBase<resolvePurge_args, resolvePurge_args._Fields>, java.io.Serializable, Cloneable, Comparable<resolvePurge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolvePurge_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PURGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("purgeId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField NOTES_FIELD_DESC = new org.apache.thrift.protocol.TField("notes", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolvePurge_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolvePurge_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required
    public long purgeId; // required
    public String notes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      PURGE_ID((short)2, "purgeId"),
      NOTES((short)3, "notes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // PURGE_ID
            return PURGE_ID;
          case 3: // NOTES
            return NOTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PURGEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.PURGE_ID, new org.apache.thrift.meta_data.FieldMetaData("purgeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NOTES, new org.apache.thrift.meta_data.FieldMetaData("notes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolvePurge_args.class, metaDataMap);
    }

    public resolvePurge_args() {
    }

    public resolvePurge_args(
      ezbake.base.thrift.EzSecurityToken token,
      long purgeId,
      String notes)
    {
      this();
      this.token = token;
      this.purgeId = purgeId;
      setPurgeIdIsSet(true);
      this.notes = notes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolvePurge_args(resolvePurge_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
      this.purgeId = other.purgeId;
      if (other.isSetNotes()) {
        this.notes = other.notes;
      }
    }

    public resolvePurge_args deepCopy() {
      return new resolvePurge_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setPurgeIdIsSet(false);
      this.purgeId = 0;
      this.notes = null;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public resolvePurge_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long getPurgeId() {
      return this.purgeId;
    }

    public resolvePurge_args setPurgeId(long purgeId) {
      this.purgeId = purgeId;
      setPurgeIdIsSet(true);
      return this;
    }

    public void unsetPurgeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PURGEID_ISSET_ID);
    }

    /** Returns true if field purgeId is set (has been assigned a value) and false otherwise */
    public boolean isSetPurgeId() {
      return EncodingUtils.testBit(__isset_bitfield, __PURGEID_ISSET_ID);
    }

    public void setPurgeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PURGEID_ISSET_ID, value);
    }

    public String getNotes() {
      return this.notes;
    }

    public resolvePurge_args setNotes(String notes) {
      this.notes = notes;
      return this;
    }

    public void unsetNotes() {
      this.notes = null;
    }

    /** Returns true if field notes is set (has been assigned a value) and false otherwise */
    public boolean isSetNotes() {
      return this.notes != null;
    }

    public void setNotesIsSet(boolean value) {
      if (!value) {
        this.notes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case PURGE_ID:
        if (value == null) {
          unsetPurgeId();
        } else {
          setPurgeId((Long)value);
        }
        break;

      case NOTES:
        if (value == null) {
          unsetNotes();
        } else {
          setNotes((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case PURGE_ID:
        return Long.valueOf(getPurgeId());

      case NOTES:
        return getNotes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case PURGE_ID:
        return isSetPurgeId();
      case NOTES:
        return isSetNotes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolvePurge_args)
        return this.equals((resolvePurge_args)that);
      return false;
    }

    public boolean equals(resolvePurge_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_purgeId = true;
      boolean that_present_purgeId = true;
      if (this_present_purgeId || that_present_purgeId) {
        if (!(this_present_purgeId && that_present_purgeId))
          return false;
        if (this.purgeId != that.purgeId)
          return false;
      }

      boolean this_present_notes = true && this.isSetNotes();
      boolean that_present_notes = true && that.isSetNotes();
      if (this_present_notes || that_present_notes) {
        if (!(this_present_notes && that_present_notes))
          return false;
        if (!this.notes.equals(that.notes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_token = true && (isSetToken());
      builder.append(present_token);
      if (present_token)
        builder.append(token);

      boolean present_purgeId = true;
      builder.append(present_purgeId);
      if (present_purgeId)
        builder.append(purgeId);

      boolean present_notes = true && (isSetNotes());
      builder.append(present_notes);
      if (present_notes)
        builder.append(notes);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(resolvePurge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPurgeId()).compareTo(other.isSetPurgeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPurgeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purgeId, other.purgeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotes()).compareTo(other.isSetNotes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notes, other.notes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolvePurge_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("purgeId:");
      sb.append(this.purgeId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("notes:");
      if (this.notes == null) {
        sb.append("null");
      } else {
        sb.append(this.notes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'purgeId' because it's a primitive and you chose the non-beans generator.
      if (notes == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'notes' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolvePurge_argsStandardSchemeFactory implements SchemeFactory {
      public resolvePurge_argsStandardScheme getScheme() {
        return new resolvePurge_argsStandardScheme();
      }
    }

    private static class resolvePurge_argsStandardScheme extends StandardScheme<resolvePurge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolvePurge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PURGE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.purgeId = iprot.readI64();
                struct.setPurgeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOTES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.notes = iprot.readString();
                struct.setNotesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetPurgeId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'purgeId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolvePurge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PURGE_ID_FIELD_DESC);
        oprot.writeI64(struct.purgeId);
        oprot.writeFieldEnd();
        if (struct.notes != null) {
          oprot.writeFieldBegin(NOTES_FIELD_DESC);
          oprot.writeString(struct.notes);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolvePurge_argsTupleSchemeFactory implements SchemeFactory {
      public resolvePurge_argsTupleScheme getScheme() {
        return new resolvePurge_argsTupleScheme();
      }
    }

    private static class resolvePurge_argsTupleScheme extends TupleScheme<resolvePurge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolvePurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.token.write(oprot);
        oprot.writeI64(struct.purgeId);
        oprot.writeString(struct.notes);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolvePurge_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = new ezbake.base.thrift.EzSecurityToken();
        struct.token.read(iprot);
        struct.setTokenIsSet(true);
        struct.purgeId = iprot.readI64();
        struct.setPurgeIdIsSet(true);
        struct.notes = iprot.readString();
        struct.setNotesIsSet(true);
      }
    }

  }

  public static class resolvePurge_result implements org.apache.thrift.TBase<resolvePurge_result, resolvePurge_result._Fields>, java.io.Serializable, Cloneable, Comparable<resolvePurge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolvePurge_result");

    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("down", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolvePurge_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolvePurge_resultTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public CentralPurgeServiceException down; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY((short)1, "security"),
      DOWN((short)2, "down");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOWN
            return DOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOWN, new org.apache.thrift.meta_data.FieldMetaData("down", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolvePurge_result.class, metaDataMap);
    }

    public resolvePurge_result() {
    }

    public resolvePurge_result(
      ezbake.base.thrift.EzSecurityTokenException security,
      CentralPurgeServiceException down)
    {
      this();
      this.security = security;
      this.down = down;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolvePurge_result(resolvePurge_result other) {
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDown()) {
        this.down = new CentralPurgeServiceException(other.down);
      }
    }

    public resolvePurge_result deepCopy() {
      return new resolvePurge_result(this);
    }

    @Override
    public void clear() {
      this.security = null;
      this.down = null;
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public resolvePurge_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public CentralPurgeServiceException getDown() {
      return this.down;
    }

    public resolvePurge_result setDown(CentralPurgeServiceException down) {
      this.down = down;
      return this;
    }

    public void unsetDown() {
      this.down = null;
    }

    /** Returns true if field down is set (has been assigned a value) and false otherwise */
    public boolean isSetDown() {
      return this.down != null;
    }

    public void setDownIsSet(boolean value) {
      if (!value) {
        this.down = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOWN:
        if (value == null) {
          unsetDown();
        } else {
          setDown((CentralPurgeServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY:
        return getSecurity();

      case DOWN:
        return getDown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY:
        return isSetSecurity();
      case DOWN:
        return isSetDown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolvePurge_result)
        return this.equals((resolvePurge_result)that);
      return false;
    }

    public boolean equals(resolvePurge_result that) {
      if (that == null)
        return false;

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_down = true && this.isSetDown();
      boolean that_present_down = true && that.isSetDown();
      if (this_present_down || that_present_down) {
        if (!(this_present_down && that_present_down))
          return false;
        if (!this.down.equals(that.down))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_down = true && (isSetDown());
      builder.append(present_down);
      if (present_down)
        builder.append(down);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(resolvePurge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDown()).compareTo(other.isSetDown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.down, other.down);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolvePurge_result(");
      boolean first = true;

      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("down:");
      if (this.down == null) {
        sb.append("null");
      } else {
        sb.append(this.down);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolvePurge_resultStandardSchemeFactory implements SchemeFactory {
      public resolvePurge_resultStandardScheme getScheme() {
        return new resolvePurge_resultStandardScheme();
      }
    }

    private static class resolvePurge_resultStandardScheme extends StandardScheme<resolvePurge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolvePurge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOWN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.down = new CentralPurgeServiceException();
                struct.down.read(iprot);
                struct.setDownIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolvePurge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.down != null) {
          oprot.writeFieldBegin(DOWN_FIELD_DESC);
          struct.down.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolvePurge_resultTupleSchemeFactory implements SchemeFactory {
      public resolvePurge_resultTupleScheme getScheme() {
        return new resolvePurge_resultTupleScheme();
      }
    }

    private static class resolvePurge_resultTupleScheme extends TupleScheme<resolvePurge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolvePurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurity()) {
          optionals.set(0);
        }
        if (struct.isSetDown()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDown()) {
          struct.down.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolvePurge_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(1)) {
          struct.down = new CentralPurgeServiceException();
          struct.down.read(iprot);
          struct.setDownIsSet(true);
        }
      }
    }

  }

  public static class getAgeOffEventState_args implements org.apache.thrift.TBase<getAgeOffEventState_args, getAgeOffEventState_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAgeOffEventState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAgeOffEventState_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AGE_OFF_EVENT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("ageOffEventIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAgeOffEventState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAgeOffEventState_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required
    public List<Long> ageOffEventIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      AGE_OFF_EVENT_IDS((short)2, "ageOffEventIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // AGE_OFF_EVENT_IDS
            return AGE_OFF_EVENT_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.AGE_OFF_EVENT_IDS, new org.apache.thrift.meta_data.FieldMetaData("ageOffEventIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAgeOffEventState_args.class, metaDataMap);
    }

    public getAgeOffEventState_args() {
    }

    public getAgeOffEventState_args(
      ezbake.base.thrift.EzSecurityToken token,
      List<Long> ageOffEventIds)
    {
      this();
      this.token = token;
      this.ageOffEventIds = ageOffEventIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAgeOffEventState_args(getAgeOffEventState_args other) {
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
      if (other.isSetAgeOffEventIds()) {
        List<Long> __this__ageOffEventIds = new ArrayList<Long>(other.ageOffEventIds);
        this.ageOffEventIds = __this__ageOffEventIds;
      }
    }

    public getAgeOffEventState_args deepCopy() {
      return new getAgeOffEventState_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.ageOffEventIds = null;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getAgeOffEventState_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public int getAgeOffEventIdsSize() {
      return (this.ageOffEventIds == null) ? 0 : this.ageOffEventIds.size();
    }

    public java.util.Iterator<Long> getAgeOffEventIdsIterator() {
      return (this.ageOffEventIds == null) ? null : this.ageOffEventIds.iterator();
    }

    public void addToAgeOffEventIds(long elem) {
      if (this.ageOffEventIds == null) {
        this.ageOffEventIds = new ArrayList<Long>();
      }
      this.ageOffEventIds.add(elem);
    }

    public List<Long> getAgeOffEventIds() {
      return this.ageOffEventIds;
    }

    public getAgeOffEventState_args setAgeOffEventIds(List<Long> ageOffEventIds) {
      this.ageOffEventIds = ageOffEventIds;
      return this;
    }

    public void unsetAgeOffEventIds() {
      this.ageOffEventIds = null;
    }

    /** Returns true if field ageOffEventIds is set (has been assigned a value) and false otherwise */
    public boolean isSetAgeOffEventIds() {
      return this.ageOffEventIds != null;
    }

    public void setAgeOffEventIdsIsSet(boolean value) {
      if (!value) {
        this.ageOffEventIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case AGE_OFF_EVENT_IDS:
        if (value == null) {
          unsetAgeOffEventIds();
        } else {
          setAgeOffEventIds((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case AGE_OFF_EVENT_IDS:
        return getAgeOffEventIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case AGE_OFF_EVENT_IDS:
        return isSetAgeOffEventIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAgeOffEventState_args)
        return this.equals((getAgeOffEventState_args)that);
      return false;
    }

    public boolean equals(getAgeOffEventState_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ageOffEventIds = true && this.isSetAgeOffEventIds();
      boolean that_present_ageOffEventIds = true && that.isSetAgeOffEventIds();
      if (this_present_ageOffEventIds || that_present_ageOffEventIds) {
        if (!(this_present_ageOffEventIds && that_present_ageOffEventIds))
          return false;
        if (!this.ageOffEventIds.equals(that.ageOffEventIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_token = true && (isSetToken());
      builder.append(present_token);
      if (present_token)
        builder.append(token);

      boolean present_ageOffEventIds = true && (isSetAgeOffEventIds());
      builder.append(present_ageOffEventIds);
      if (present_ageOffEventIds)
        builder.append(ageOffEventIds);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getAgeOffEventState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAgeOffEventIds()).compareTo(other.isSetAgeOffEventIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgeOffEventIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ageOffEventIds, other.ageOffEventIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAgeOffEventState_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ageOffEventIds:");
      if (this.ageOffEventIds == null) {
        sb.append("null");
      } else {
        sb.append(this.ageOffEventIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAgeOffEventState_argsStandardSchemeFactory implements SchemeFactory {
      public getAgeOffEventState_argsStandardScheme getScheme() {
        return new getAgeOffEventState_argsStandardScheme();
      }
    }

    private static class getAgeOffEventState_argsStandardScheme extends StandardScheme<getAgeOffEventState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAgeOffEventState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AGE_OFF_EVENT_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                  struct.ageOffEventIds = new ArrayList<Long>(_list94.size);
                  for (int _i95 = 0; _i95 < _list94.size; ++_i95)
                  {
                    long _elem96;
                    _elem96 = iprot.readI64();
                    struct.ageOffEventIds.add(_elem96);
                  }
                  iprot.readListEnd();
                }
                struct.setAgeOffEventIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAgeOffEventState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.ageOffEventIds != null) {
          oprot.writeFieldBegin(AGE_OFF_EVENT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.ageOffEventIds.size()));
            for (long _iter97 : struct.ageOffEventIds)
            {
              oprot.writeI64(_iter97);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAgeOffEventState_argsTupleSchemeFactory implements SchemeFactory {
      public getAgeOffEventState_argsTupleScheme getScheme() {
        return new getAgeOffEventState_argsTupleScheme();
      }
    }

    private static class getAgeOffEventState_argsTupleScheme extends TupleScheme<getAgeOffEventState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAgeOffEventState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.token.write(oprot);
        BitSet optionals = new BitSet();
        if (struct.isSetAgeOffEventIds()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAgeOffEventIds()) {
          {
            oprot.writeI32(struct.ageOffEventIds.size());
            for (long _iter98 : struct.ageOffEventIds)
            {
              oprot.writeI64(_iter98);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAgeOffEventState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = new ezbake.base.thrift.EzSecurityToken();
        struct.token.read(iprot);
        struct.setTokenIsSet(true);
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list99 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.ageOffEventIds = new ArrayList<Long>(_list99.size);
            for (int _i100 = 0; _i100 < _list99.size; ++_i100)
            {
              long _elem101;
              _elem101 = iprot.readI64();
              struct.ageOffEventIds.add(_elem101);
            }
          }
          struct.setAgeOffEventIdsIsSet(true);
        }
      }
    }

  }

  public static class getAgeOffEventState_result implements org.apache.thrift.TBase<getAgeOffEventState_result, getAgeOffEventState_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAgeOffEventState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAgeOffEventState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("down", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAgeOffEventState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAgeOffEventState_resultTupleSchemeFactory());
    }

    public List<CentralAgeOffEventState> success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public CentralPurgeServiceException down; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      DOWN((short)2, "down");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOWN
            return DOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CentralAgeOffEventState.class))));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOWN, new org.apache.thrift.meta_data.FieldMetaData("down", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAgeOffEventState_result.class, metaDataMap);
    }

    public getAgeOffEventState_result() {
    }

    public getAgeOffEventState_result(
      List<CentralAgeOffEventState> success,
      ezbake.base.thrift.EzSecurityTokenException security,
      CentralPurgeServiceException down)
    {
      this();
      this.success = success;
      this.security = security;
      this.down = down;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAgeOffEventState_result(getAgeOffEventState_result other) {
      if (other.isSetSuccess()) {
        List<CentralAgeOffEventState> __this__success = new ArrayList<CentralAgeOffEventState>(other.success.size());
        for (CentralAgeOffEventState other_element : other.success) {
          __this__success.add(new CentralAgeOffEventState(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDown()) {
        this.down = new CentralPurgeServiceException(other.down);
      }
    }

    public getAgeOffEventState_result deepCopy() {
      return new getAgeOffEventState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
      this.down = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<CentralAgeOffEventState> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(CentralAgeOffEventState elem) {
      if (this.success == null) {
        this.success = new ArrayList<CentralAgeOffEventState>();
      }
      this.success.add(elem);
    }

    public List<CentralAgeOffEventState> getSuccess() {
      return this.success;
    }

    public getAgeOffEventState_result setSuccess(List<CentralAgeOffEventState> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getAgeOffEventState_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public CentralPurgeServiceException getDown() {
      return this.down;
    }

    public getAgeOffEventState_result setDown(CentralPurgeServiceException down) {
      this.down = down;
      return this;
    }

    public void unsetDown() {
      this.down = null;
    }

    /** Returns true if field down is set (has been assigned a value) and false otherwise */
    public boolean isSetDown() {
      return this.down != null;
    }

    public void setDownIsSet(boolean value) {
      if (!value) {
        this.down = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<CentralAgeOffEventState>)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOWN:
        if (value == null) {
          unsetDown();
        } else {
          setDown((CentralPurgeServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      case DOWN:
        return getDown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case DOWN:
        return isSetDown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAgeOffEventState_result)
        return this.equals((getAgeOffEventState_result)that);
      return false;
    }

    public boolean equals(getAgeOffEventState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_down = true && this.isSetDown();
      boolean that_present_down = true && that.isSetDown();
      if (this_present_down || that_present_down) {
        if (!(this_present_down && that_present_down))
          return false;
        if (!this.down.equals(that.down))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_down = true && (isSetDown());
      builder.append(present_down);
      if (present_down)
        builder.append(down);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getAgeOffEventState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDown()).compareTo(other.isSetDown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.down, other.down);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAgeOffEventState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("down:");
      if (this.down == null) {
        sb.append("null");
      } else {
        sb.append(this.down);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAgeOffEventState_resultStandardSchemeFactory implements SchemeFactory {
      public getAgeOffEventState_resultStandardScheme getScheme() {
        return new getAgeOffEventState_resultStandardScheme();
      }
    }

    private static class getAgeOffEventState_resultStandardScheme extends StandardScheme<getAgeOffEventState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAgeOffEventState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list102 = iprot.readListBegin();
                  struct.success = new ArrayList<CentralAgeOffEventState>(_list102.size);
                  for (int _i103 = 0; _i103 < _list102.size; ++_i103)
                  {
                    CentralAgeOffEventState _elem104;
                    _elem104 = new CentralAgeOffEventState();
                    _elem104.read(iprot);
                    struct.success.add(_elem104);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOWN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.down = new CentralPurgeServiceException();
                struct.down.read(iprot);
                struct.setDownIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAgeOffEventState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (CentralAgeOffEventState _iter105 : struct.success)
            {
              _iter105.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.down != null) {
          oprot.writeFieldBegin(DOWN_FIELD_DESC);
          struct.down.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAgeOffEventState_resultTupleSchemeFactory implements SchemeFactory {
      public getAgeOffEventState_resultTupleScheme getScheme() {
        return new getAgeOffEventState_resultTupleScheme();
      }
    }

    private static class getAgeOffEventState_resultTupleScheme extends TupleScheme<getAgeOffEventState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAgeOffEventState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetDown()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (CentralAgeOffEventState _iter106 : struct.success)
            {
              _iter106.write(oprot);
            }
          }
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDown()) {
          struct.down.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAgeOffEventState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list107 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<CentralAgeOffEventState>(_list107.size);
            for (int _i108 = 0; _i108 < _list107.size; ++_i108)
            {
              CentralAgeOffEventState _elem109;
              _elem109 = new CentralAgeOffEventState();
              _elem109.read(iprot);
              struct.success.add(_elem109);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.down = new CentralPurgeServiceException();
          struct.down.read(iprot);
          struct.setDownIsSet(true);
        }
      }
    }

  }

  public static class getAllAgeOffEvents_args implements org.apache.thrift.TBase<getAllAgeOffEvents_args, getAllAgeOffEvents_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllAgeOffEvents_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllAgeOffEvents_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllAgeOffEvents_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllAgeOffEvents_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllAgeOffEvents_args.class, metaDataMap);
    }

    public getAllAgeOffEvents_args() {
    }

    public getAllAgeOffEvents_args(
      ezbake.base.thrift.EzSecurityToken token)
    {
      this();
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllAgeOffEvents_args(getAllAgeOffEvents_args other) {
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
    }

    public getAllAgeOffEvents_args deepCopy() {
      return new getAllAgeOffEvents_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getAllAgeOffEvents_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllAgeOffEvents_args)
        return this.equals((getAllAgeOffEvents_args)that);
      return false;
    }

    public boolean equals(getAllAgeOffEvents_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_token = true && (isSetToken());
      builder.append(present_token);
      if (present_token)
        builder.append(token);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getAllAgeOffEvents_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllAgeOffEvents_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllAgeOffEvents_argsStandardSchemeFactory implements SchemeFactory {
      public getAllAgeOffEvents_argsStandardScheme getScheme() {
        return new getAllAgeOffEvents_argsStandardScheme();
      }
    }

    private static class getAllAgeOffEvents_argsStandardScheme extends StandardScheme<getAllAgeOffEvents_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllAgeOffEvents_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllAgeOffEvents_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllAgeOffEvents_argsTupleSchemeFactory implements SchemeFactory {
      public getAllAgeOffEvents_argsTupleScheme getScheme() {
        return new getAllAgeOffEvents_argsTupleScheme();
      }
    }

    private static class getAllAgeOffEvents_argsTupleScheme extends TupleScheme<getAllAgeOffEvents_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllAgeOffEvents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.token.write(oprot);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllAgeOffEvents_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = new ezbake.base.thrift.EzSecurityToken();
        struct.token.read(iprot);
        struct.setTokenIsSet(true);
      }
    }

  }

  public static class getAllAgeOffEvents_result implements org.apache.thrift.TBase<getAllAgeOffEvents_result, getAllAgeOffEvents_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllAgeOffEvents_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllAgeOffEvents_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("down", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllAgeOffEvents_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllAgeOffEvents_resultTupleSchemeFactory());
    }

    public List<Long> success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public CentralPurgeServiceException down; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      DOWN((short)2, "down");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOWN
            return DOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOWN, new org.apache.thrift.meta_data.FieldMetaData("down", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllAgeOffEvents_result.class, metaDataMap);
    }

    public getAllAgeOffEvents_result() {
    }

    public getAllAgeOffEvents_result(
      List<Long> success,
      ezbake.base.thrift.EzSecurityTokenException security,
      CentralPurgeServiceException down)
    {
      this();
      this.success = success;
      this.security = security;
      this.down = down;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllAgeOffEvents_result(getAllAgeOffEvents_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDown()) {
        this.down = new CentralPurgeServiceException(other.down);
      }
    }

    public getAllAgeOffEvents_result deepCopy() {
      return new getAllAgeOffEvents_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
      this.down = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public getAllAgeOffEvents_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getAllAgeOffEvents_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public CentralPurgeServiceException getDown() {
      return this.down;
    }

    public getAllAgeOffEvents_result setDown(CentralPurgeServiceException down) {
      this.down = down;
      return this;
    }

    public void unsetDown() {
      this.down = null;
    }

    /** Returns true if field down is set (has been assigned a value) and false otherwise */
    public boolean isSetDown() {
      return this.down != null;
    }

    public void setDownIsSet(boolean value) {
      if (!value) {
        this.down = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOWN:
        if (value == null) {
          unsetDown();
        } else {
          setDown((CentralPurgeServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      case DOWN:
        return getDown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case DOWN:
        return isSetDown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllAgeOffEvents_result)
        return this.equals((getAllAgeOffEvents_result)that);
      return false;
    }

    public boolean equals(getAllAgeOffEvents_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_down = true && this.isSetDown();
      boolean that_present_down = true && that.isSetDown();
      if (this_present_down || that_present_down) {
        if (!(this_present_down && that_present_down))
          return false;
        if (!this.down.equals(that.down))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_down = true && (isSetDown());
      builder.append(present_down);
      if (present_down)
        builder.append(down);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getAllAgeOffEvents_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDown()).compareTo(other.isSetDown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.down, other.down);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllAgeOffEvents_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("down:");
      if (this.down == null) {
        sb.append("null");
      } else {
        sb.append(this.down);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllAgeOffEvents_resultStandardSchemeFactory implements SchemeFactory {
      public getAllAgeOffEvents_resultStandardScheme getScheme() {
        return new getAllAgeOffEvents_resultStandardScheme();
      }
    }

    private static class getAllAgeOffEvents_resultStandardScheme extends StandardScheme<getAllAgeOffEvents_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllAgeOffEvents_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list110 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list110.size);
                  for (int _i111 = 0; _i111 < _list110.size; ++_i111)
                  {
                    long _elem112;
                    _elem112 = iprot.readI64();
                    struct.success.add(_elem112);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOWN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.down = new CentralPurgeServiceException();
                struct.down.read(iprot);
                struct.setDownIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllAgeOffEvents_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter113 : struct.success)
            {
              oprot.writeI64(_iter113);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.down != null) {
          oprot.writeFieldBegin(DOWN_FIELD_DESC);
          struct.down.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllAgeOffEvents_resultTupleSchemeFactory implements SchemeFactory {
      public getAllAgeOffEvents_resultTupleScheme getScheme() {
        return new getAllAgeOffEvents_resultTupleScheme();
      }
    }

    private static class getAllAgeOffEvents_resultTupleScheme extends TupleScheme<getAllAgeOffEvents_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllAgeOffEvents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetDown()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter114 : struct.success)
            {
              oprot.writeI64(_iter114);
            }
          }
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDown()) {
          struct.down.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllAgeOffEvents_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list115 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list115.size);
            for (int _i116 = 0; _i116 < _list115.size; ++_i116)
            {
              long _elem117;
              _elem117 = iprot.readI64();
              struct.success.add(_elem117);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.down = new CentralPurgeServiceException();
          struct.down.read(iprot);
          struct.setDownIsSet(true);
        }
      }
    }

  }

  public static class resolveAgeOffEvent_args implements org.apache.thrift.TBase<resolveAgeOffEvent_args, resolveAgeOffEvent_args._Fields>, java.io.Serializable, Cloneable, Comparable<resolveAgeOffEvent_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolveAgeOffEvent_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField AGE_OFF_EVENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ageOffEventId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField NOTES_FIELD_DESC = new org.apache.thrift.protocol.TField("notes", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolveAgeOffEvent_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolveAgeOffEvent_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required
    public long ageOffEventId; // required
    public String notes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      AGE_OFF_EVENT_ID((short)2, "ageOffEventId"),
      NOTES((short)3, "notes");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // AGE_OFF_EVENT_ID
            return AGE_OFF_EVENT_ID;
          case 3: // NOTES
            return NOTES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __AGEOFFEVENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.AGE_OFF_EVENT_ID, new org.apache.thrift.meta_data.FieldMetaData("ageOffEventId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NOTES, new org.apache.thrift.meta_data.FieldMetaData("notes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolveAgeOffEvent_args.class, metaDataMap);
    }

    public resolveAgeOffEvent_args() {
    }

    public resolveAgeOffEvent_args(
      ezbake.base.thrift.EzSecurityToken token,
      long ageOffEventId,
      String notes)
    {
      this();
      this.token = token;
      this.ageOffEventId = ageOffEventId;
      setAgeOffEventIdIsSet(true);
      this.notes = notes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolveAgeOffEvent_args(resolveAgeOffEvent_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
      this.ageOffEventId = other.ageOffEventId;
      if (other.isSetNotes()) {
        this.notes = other.notes;
      }
    }

    public resolveAgeOffEvent_args deepCopy() {
      return new resolveAgeOffEvent_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setAgeOffEventIdIsSet(false);
      this.ageOffEventId = 0;
      this.notes = null;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public resolveAgeOffEvent_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public long getAgeOffEventId() {
      return this.ageOffEventId;
    }

    public resolveAgeOffEvent_args setAgeOffEventId(long ageOffEventId) {
      this.ageOffEventId = ageOffEventId;
      setAgeOffEventIdIsSet(true);
      return this;
    }

    public void unsetAgeOffEventId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AGEOFFEVENTID_ISSET_ID);
    }

    /** Returns true if field ageOffEventId is set (has been assigned a value) and false otherwise */
    public boolean isSetAgeOffEventId() {
      return EncodingUtils.testBit(__isset_bitfield, __AGEOFFEVENTID_ISSET_ID);
    }

    public void setAgeOffEventIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AGEOFFEVENTID_ISSET_ID, value);
    }

    public String getNotes() {
      return this.notes;
    }

    public resolveAgeOffEvent_args setNotes(String notes) {
      this.notes = notes;
      return this;
    }

    public void unsetNotes() {
      this.notes = null;
    }

    /** Returns true if field notes is set (has been assigned a value) and false otherwise */
    public boolean isSetNotes() {
      return this.notes != null;
    }

    public void setNotesIsSet(boolean value) {
      if (!value) {
        this.notes = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case AGE_OFF_EVENT_ID:
        if (value == null) {
          unsetAgeOffEventId();
        } else {
          setAgeOffEventId((Long)value);
        }
        break;

      case NOTES:
        if (value == null) {
          unsetNotes();
        } else {
          setNotes((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case AGE_OFF_EVENT_ID:
        return Long.valueOf(getAgeOffEventId());

      case NOTES:
        return getNotes();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case AGE_OFF_EVENT_ID:
        return isSetAgeOffEventId();
      case NOTES:
        return isSetNotes();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolveAgeOffEvent_args)
        return this.equals((resolveAgeOffEvent_args)that);
      return false;
    }

    public boolean equals(resolveAgeOffEvent_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_ageOffEventId = true;
      boolean that_present_ageOffEventId = true;
      if (this_present_ageOffEventId || that_present_ageOffEventId) {
        if (!(this_present_ageOffEventId && that_present_ageOffEventId))
          return false;
        if (this.ageOffEventId != that.ageOffEventId)
          return false;
      }

      boolean this_present_notes = true && this.isSetNotes();
      boolean that_present_notes = true && that.isSetNotes();
      if (this_present_notes || that_present_notes) {
        if (!(this_present_notes && that_present_notes))
          return false;
        if (!this.notes.equals(that.notes))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_token = true && (isSetToken());
      builder.append(present_token);
      if (present_token)
        builder.append(token);

      boolean present_ageOffEventId = true;
      builder.append(present_ageOffEventId);
      if (present_ageOffEventId)
        builder.append(ageOffEventId);

      boolean present_notes = true && (isSetNotes());
      builder.append(present_notes);
      if (present_notes)
        builder.append(notes);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(resolveAgeOffEvent_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAgeOffEventId()).compareTo(other.isSetAgeOffEventId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAgeOffEventId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ageOffEventId, other.ageOffEventId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNotes()).compareTo(other.isSetNotes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notes, other.notes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolveAgeOffEvent_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ageOffEventId:");
      sb.append(this.ageOffEventId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("notes:");
      if (this.notes == null) {
        sb.append("null");
      } else {
        sb.append(this.notes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // alas, we cannot check 'ageOffEventId' because it's a primitive and you chose the non-beans generator.
      if (notes == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'notes' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolveAgeOffEvent_argsStandardSchemeFactory implements SchemeFactory {
      public resolveAgeOffEvent_argsStandardScheme getScheme() {
        return new resolveAgeOffEvent_argsStandardScheme();
      }
    }

    private static class resolveAgeOffEvent_argsStandardScheme extends StandardScheme<resolveAgeOffEvent_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolveAgeOffEvent_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AGE_OFF_EVENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ageOffEventId = iprot.readI64();
                struct.setAgeOffEventIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOTES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.notes = iprot.readString();
                struct.setNotesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        if (!struct.isSetAgeOffEventId()) {
          throw new org.apache.thrift.protocol.TProtocolException("Required field 'ageOffEventId' was not found in serialized data! Struct: " + toString());
        }
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolveAgeOffEvent_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(AGE_OFF_EVENT_ID_FIELD_DESC);
        oprot.writeI64(struct.ageOffEventId);
        oprot.writeFieldEnd();
        if (struct.notes != null) {
          oprot.writeFieldBegin(NOTES_FIELD_DESC);
          oprot.writeString(struct.notes);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolveAgeOffEvent_argsTupleSchemeFactory implements SchemeFactory {
      public resolveAgeOffEvent_argsTupleScheme getScheme() {
        return new resolveAgeOffEvent_argsTupleScheme();
      }
    }

    private static class resolveAgeOffEvent_argsTupleScheme extends TupleScheme<resolveAgeOffEvent_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolveAgeOffEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.token.write(oprot);
        oprot.writeI64(struct.ageOffEventId);
        oprot.writeString(struct.notes);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolveAgeOffEvent_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = new ezbake.base.thrift.EzSecurityToken();
        struct.token.read(iprot);
        struct.setTokenIsSet(true);
        struct.ageOffEventId = iprot.readI64();
        struct.setAgeOffEventIdIsSet(true);
        struct.notes = iprot.readString();
        struct.setNotesIsSet(true);
      }
    }

  }

  public static class resolveAgeOffEvent_result implements org.apache.thrift.TBase<resolveAgeOffEvent_result, resolveAgeOffEvent_result._Fields>, java.io.Serializable, Cloneable, Comparable<resolveAgeOffEvent_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resolveAgeOffEvent_result");

    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("down", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resolveAgeOffEvent_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resolveAgeOffEvent_resultTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public CentralPurgeServiceException down; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SECURITY((short)1, "security"),
      DOWN((short)2, "down");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOWN
            return DOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOWN, new org.apache.thrift.meta_data.FieldMetaData("down", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resolveAgeOffEvent_result.class, metaDataMap);
    }

    public resolveAgeOffEvent_result() {
    }

    public resolveAgeOffEvent_result(
      ezbake.base.thrift.EzSecurityTokenException security,
      CentralPurgeServiceException down)
    {
      this();
      this.security = security;
      this.down = down;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resolveAgeOffEvent_result(resolveAgeOffEvent_result other) {
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDown()) {
        this.down = new CentralPurgeServiceException(other.down);
      }
    }

    public resolveAgeOffEvent_result deepCopy() {
      return new resolveAgeOffEvent_result(this);
    }

    @Override
    public void clear() {
      this.security = null;
      this.down = null;
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public resolveAgeOffEvent_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public CentralPurgeServiceException getDown() {
      return this.down;
    }

    public resolveAgeOffEvent_result setDown(CentralPurgeServiceException down) {
      this.down = down;
      return this;
    }

    public void unsetDown() {
      this.down = null;
    }

    /** Returns true if field down is set (has been assigned a value) and false otherwise */
    public boolean isSetDown() {
      return this.down != null;
    }

    public void setDownIsSet(boolean value) {
      if (!value) {
        this.down = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOWN:
        if (value == null) {
          unsetDown();
        } else {
          setDown((CentralPurgeServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SECURITY:
        return getSecurity();

      case DOWN:
        return getDown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SECURITY:
        return isSetSecurity();
      case DOWN:
        return isSetDown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resolveAgeOffEvent_result)
        return this.equals((resolveAgeOffEvent_result)that);
      return false;
    }

    public boolean equals(resolveAgeOffEvent_result that) {
      if (that == null)
        return false;

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_down = true && this.isSetDown();
      boolean that_present_down = true && that.isSetDown();
      if (this_present_down || that_present_down) {
        if (!(this_present_down && that_present_down))
          return false;
        if (!this.down.equals(that.down))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_down = true && (isSetDown());
      builder.append(present_down);
      if (present_down)
        builder.append(down);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(resolveAgeOffEvent_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDown()).compareTo(other.isSetDown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.down, other.down);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resolveAgeOffEvent_result(");
      boolean first = true;

      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("down:");
      if (this.down == null) {
        sb.append("null");
      } else {
        sb.append(this.down);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resolveAgeOffEvent_resultStandardSchemeFactory implements SchemeFactory {
      public resolveAgeOffEvent_resultStandardScheme getScheme() {
        return new resolveAgeOffEvent_resultStandardScheme();
      }
    }

    private static class resolveAgeOffEvent_resultStandardScheme extends StandardScheme<resolveAgeOffEvent_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resolveAgeOffEvent_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOWN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.down = new CentralPurgeServiceException();
                struct.down.read(iprot);
                struct.setDownIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resolveAgeOffEvent_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.down != null) {
          oprot.writeFieldBegin(DOWN_FIELD_DESC);
          struct.down.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resolveAgeOffEvent_resultTupleSchemeFactory implements SchemeFactory {
      public resolveAgeOffEvent_resultTupleScheme getScheme() {
        return new resolveAgeOffEvent_resultTupleScheme();
      }
    }

    private static class resolveAgeOffEvent_resultTupleScheme extends TupleScheme<resolveAgeOffEvent_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resolveAgeOffEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSecurity()) {
          optionals.set(0);
        }
        if (struct.isSetDown()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDown()) {
          struct.down.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resolveAgeOffEvent_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(1)) {
          struct.down = new CentralPurgeServiceException();
          struct.down.read(iprot);
          struct.setDownIsSet(true);
        }
      }
    }

  }

  public static class getPagedSortedFilteredPurgeStates_args implements org.apache.thrift.TBase<getPagedSortedFilteredPurgeStates_args, getPagedSortedFilteredPurgeStates_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPagedSortedFilteredPurgeStates_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPagedSortedFilteredPurgeStates_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField NUM_PER_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("numPerPage", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPagedSortedFilteredPurgeStates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPagedSortedFilteredPurgeStates_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required
    public List<CentralPurgeStatus> statuses; // required
    public int pageNum; // required
    public int numPerPage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      STATUSES((short)2, "statuses"),
      PAGE_NUM((short)3, "pageNum"),
      NUM_PER_PAGE((short)4, "numPerPage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // STATUSES
            return STATUSES;
          case 3: // PAGE_NUM
            return PAGE_NUM;
          case 4: // NUM_PER_PAGE
            return NUM_PER_PAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private static final int __NUMPERPAGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CentralPurgeStatus.class))));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM_PER_PAGE, new org.apache.thrift.meta_data.FieldMetaData("numPerPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPagedSortedFilteredPurgeStates_args.class, metaDataMap);
    }

    public getPagedSortedFilteredPurgeStates_args() {
    }

    public getPagedSortedFilteredPurgeStates_args(
      ezbake.base.thrift.EzSecurityToken token,
      List<CentralPurgeStatus> statuses,
      int pageNum,
      int numPerPage)
    {
      this();
      this.token = token;
      this.statuses = statuses;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      this.numPerPage = numPerPage;
      setNumPerPageIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPagedSortedFilteredPurgeStates_args(getPagedSortedFilteredPurgeStates_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
      if (other.isSetStatuses()) {
        List<CentralPurgeStatus> __this__statuses = new ArrayList<CentralPurgeStatus>(other.statuses.size());
        for (CentralPurgeStatus other_element : other.statuses) {
          __this__statuses.add(other_element);
        }
        this.statuses = __this__statuses;
      }
      this.pageNum = other.pageNum;
      this.numPerPage = other.numPerPage;
    }

    public getPagedSortedFilteredPurgeStates_args deepCopy() {
      return new getPagedSortedFilteredPurgeStates_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.statuses = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
      setNumPerPageIsSet(false);
      this.numPerPage = 0;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getPagedSortedFilteredPurgeStates_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public int getStatusesSize() {
      return (this.statuses == null) ? 0 : this.statuses.size();
    }

    public java.util.Iterator<CentralPurgeStatus> getStatusesIterator() {
      return (this.statuses == null) ? null : this.statuses.iterator();
    }

    public void addToStatuses(CentralPurgeStatus elem) {
      if (this.statuses == null) {
        this.statuses = new ArrayList<CentralPurgeStatus>();
      }
      this.statuses.add(elem);
    }

    public List<CentralPurgeStatus> getStatuses() {
      return this.statuses;
    }

    public getPagedSortedFilteredPurgeStates_args setStatuses(List<CentralPurgeStatus> statuses) {
      this.statuses = statuses;
      return this;
    }

    public void unsetStatuses() {
      this.statuses = null;
    }

    /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
    public boolean isSetStatuses() {
      return this.statuses != null;
    }

    public void setStatusesIsSet(boolean value) {
      if (!value) {
        this.statuses = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public getPagedSortedFilteredPurgeStates_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public int getNumPerPage() {
      return this.numPerPage;
    }

    public getPagedSortedFilteredPurgeStates_args setNumPerPage(int numPerPage) {
      this.numPerPage = numPerPage;
      setNumPerPageIsSet(true);
      return this;
    }

    public void unsetNumPerPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID);
    }

    /** Returns true if field numPerPage is set (has been assigned a value) and false otherwise */
    public boolean isSetNumPerPage() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID);
    }

    public void setNumPerPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case STATUSES:
        if (value == null) {
          unsetStatuses();
        } else {
          setStatuses((List<CentralPurgeStatus>)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      case NUM_PER_PAGE:
        if (value == null) {
          unsetNumPerPage();
        } else {
          setNumPerPage((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case STATUSES:
        return getStatuses();

      case PAGE_NUM:
        return Integer.valueOf(getPageNum());

      case NUM_PER_PAGE:
        return Integer.valueOf(getNumPerPage());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case STATUSES:
        return isSetStatuses();
      case PAGE_NUM:
        return isSetPageNum();
      case NUM_PER_PAGE:
        return isSetNumPerPage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPagedSortedFilteredPurgeStates_args)
        return this.equals((getPagedSortedFilteredPurgeStates_args)that);
      return false;
    }

    public boolean equals(getPagedSortedFilteredPurgeStates_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_statuses = true && this.isSetStatuses();
      boolean that_present_statuses = true && that.isSetStatuses();
      if (this_present_statuses || that_present_statuses) {
        if (!(this_present_statuses && that_present_statuses))
          return false;
        if (!this.statuses.equals(that.statuses))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      boolean this_present_numPerPage = true;
      boolean that_present_numPerPage = true;
      if (this_present_numPerPage || that_present_numPerPage) {
        if (!(this_present_numPerPage && that_present_numPerPage))
          return false;
        if (this.numPerPage != that.numPerPage)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_token = true && (isSetToken());
      builder.append(present_token);
      if (present_token)
        builder.append(token);

      boolean present_statuses = true && (isSetStatuses());
      builder.append(present_statuses);
      if (present_statuses)
        builder.append(statuses);

      boolean present_pageNum = true;
      builder.append(present_pageNum);
      if (present_pageNum)
        builder.append(pageNum);

      boolean present_numPerPage = true;
      builder.append(present_numPerPage);
      if (present_numPerPage)
        builder.append(numPerPage);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getPagedSortedFilteredPurgeStates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatuses()).compareTo(other.isSetStatuses());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatuses()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumPerPage()).compareTo(other.isSetNumPerPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumPerPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPerPage, other.numPerPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPagedSortedFilteredPurgeStates_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("statuses:");
      if (this.statuses == null) {
        sb.append("null");
      } else {
        sb.append(this.statuses);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPerPage:");
      sb.append(this.numPerPage);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPagedSortedFilteredPurgeStates_argsStandardSchemeFactory implements SchemeFactory {
      public getPagedSortedFilteredPurgeStates_argsStandardScheme getScheme() {
        return new getPagedSortedFilteredPurgeStates_argsStandardScheme();
      }
    }

    private static class getPagedSortedFilteredPurgeStates_argsStandardScheme extends StandardScheme<getPagedSortedFilteredPurgeStates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPagedSortedFilteredPurgeStates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUSES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list118 = iprot.readListBegin();
                  struct.statuses = new ArrayList<CentralPurgeStatus>(_list118.size);
                  for (int _i119 = 0; _i119 < _list118.size; ++_i119)
                  {
                    CentralPurgeStatus _elem120;
                    _elem120 = CentralPurgeStatus.findByValue(iprot.readI32());
                    struct.statuses.add(_elem120);
                  }
                  iprot.readListEnd();
                }
                struct.setStatusesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUM_PER_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numPerPage = iprot.readI32();
                struct.setNumPerPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPagedSortedFilteredPurgeStates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.statuses != null) {
          oprot.writeFieldBegin(STATUSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.statuses.size()));
            for (CentralPurgeStatus _iter121 : struct.statuses)
            {
              oprot.writeI32(_iter121.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_PER_PAGE_FIELD_DESC);
        oprot.writeI32(struct.numPerPage);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPagedSortedFilteredPurgeStates_argsTupleSchemeFactory implements SchemeFactory {
      public getPagedSortedFilteredPurgeStates_argsTupleScheme getScheme() {
        return new getPagedSortedFilteredPurgeStates_argsTupleScheme();
      }
    }

    private static class getPagedSortedFilteredPurgeStates_argsTupleScheme extends TupleScheme<getPagedSortedFilteredPurgeStates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPagedSortedFilteredPurgeStates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.token.write(oprot);
        BitSet optionals = new BitSet();
        if (struct.isSetStatuses()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        if (struct.isSetNumPerPage()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStatuses()) {
          {
            oprot.writeI32(struct.statuses.size());
            for (CentralPurgeStatus _iter122 : struct.statuses)
            {
              oprot.writeI32(_iter122.getValue());
            }
          }
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
        if (struct.isSetNumPerPage()) {
          oprot.writeI32(struct.numPerPage);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPagedSortedFilteredPurgeStates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = new ezbake.base.thrift.EzSecurityToken();
        struct.token.read(iprot);
        struct.setTokenIsSet(true);
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list123 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.statuses = new ArrayList<CentralPurgeStatus>(_list123.size);
            for (int _i124 = 0; _i124 < _list123.size; ++_i124)
            {
              CentralPurgeStatus _elem125;
              _elem125 = CentralPurgeStatus.findByValue(iprot.readI32());
              struct.statuses.add(_elem125);
            }
          }
          struct.setStatusesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numPerPage = iprot.readI32();
          struct.setNumPerPageIsSet(true);
        }
      }
    }

  }

  public static class getPagedSortedFilteredPurgeStates_result implements org.apache.thrift.TBase<getPagedSortedFilteredPurgeStates_result, getPagedSortedFilteredPurgeStates_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPagedSortedFilteredPurgeStates_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPagedSortedFilteredPurgeStates_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("down", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPagedSortedFilteredPurgeStates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPagedSortedFilteredPurgeStates_resultTupleSchemeFactory());
    }

    public CentralPurgeQueryResults success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public CentralPurgeServiceException down; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      DOWN((short)2, "down");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOWN
            return DOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CentralPurgeQueryResults.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOWN, new org.apache.thrift.meta_data.FieldMetaData("down", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPagedSortedFilteredPurgeStates_result.class, metaDataMap);
    }

    public getPagedSortedFilteredPurgeStates_result() {
    }

    public getPagedSortedFilteredPurgeStates_result(
      CentralPurgeQueryResults success,
      ezbake.base.thrift.EzSecurityTokenException security,
      CentralPurgeServiceException down)
    {
      this();
      this.success = success;
      this.security = security;
      this.down = down;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPagedSortedFilteredPurgeStates_result(getPagedSortedFilteredPurgeStates_result other) {
      if (other.isSetSuccess()) {
        this.success = new CentralPurgeQueryResults(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDown()) {
        this.down = new CentralPurgeServiceException(other.down);
      }
    }

    public getPagedSortedFilteredPurgeStates_result deepCopy() {
      return new getPagedSortedFilteredPurgeStates_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
      this.down = null;
    }

    public CentralPurgeQueryResults getSuccess() {
      return this.success;
    }

    public getPagedSortedFilteredPurgeStates_result setSuccess(CentralPurgeQueryResults success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getPagedSortedFilteredPurgeStates_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public CentralPurgeServiceException getDown() {
      return this.down;
    }

    public getPagedSortedFilteredPurgeStates_result setDown(CentralPurgeServiceException down) {
      this.down = down;
      return this;
    }

    public void unsetDown() {
      this.down = null;
    }

    /** Returns true if field down is set (has been assigned a value) and false otherwise */
    public boolean isSetDown() {
      return this.down != null;
    }

    public void setDownIsSet(boolean value) {
      if (!value) {
        this.down = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CentralPurgeQueryResults)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOWN:
        if (value == null) {
          unsetDown();
        } else {
          setDown((CentralPurgeServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      case DOWN:
        return getDown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case DOWN:
        return isSetDown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPagedSortedFilteredPurgeStates_result)
        return this.equals((getPagedSortedFilteredPurgeStates_result)that);
      return false;
    }

    public boolean equals(getPagedSortedFilteredPurgeStates_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_down = true && this.isSetDown();
      boolean that_present_down = true && that.isSetDown();
      if (this_present_down || that_present_down) {
        if (!(this_present_down && that_present_down))
          return false;
        if (!this.down.equals(that.down))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_down = true && (isSetDown());
      builder.append(present_down);
      if (present_down)
        builder.append(down);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getPagedSortedFilteredPurgeStates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDown()).compareTo(other.isSetDown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.down, other.down);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPagedSortedFilteredPurgeStates_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("down:");
      if (this.down == null) {
        sb.append("null");
      } else {
        sb.append(this.down);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPagedSortedFilteredPurgeStates_resultStandardSchemeFactory implements SchemeFactory {
      public getPagedSortedFilteredPurgeStates_resultStandardScheme getScheme() {
        return new getPagedSortedFilteredPurgeStates_resultStandardScheme();
      }
    }

    private static class getPagedSortedFilteredPurgeStates_resultStandardScheme extends StandardScheme<getPagedSortedFilteredPurgeStates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPagedSortedFilteredPurgeStates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CentralPurgeQueryResults();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOWN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.down = new CentralPurgeServiceException();
                struct.down.read(iprot);
                struct.setDownIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPagedSortedFilteredPurgeStates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.down != null) {
          oprot.writeFieldBegin(DOWN_FIELD_DESC);
          struct.down.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPagedSortedFilteredPurgeStates_resultTupleSchemeFactory implements SchemeFactory {
      public getPagedSortedFilteredPurgeStates_resultTupleScheme getScheme() {
        return new getPagedSortedFilteredPurgeStates_resultTupleScheme();
      }
    }

    private static class getPagedSortedFilteredPurgeStates_resultTupleScheme extends TupleScheme<getPagedSortedFilteredPurgeStates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPagedSortedFilteredPurgeStates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetDown()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDown()) {
          struct.down.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPagedSortedFilteredPurgeStates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new CentralPurgeQueryResults();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.down = new CentralPurgeServiceException();
          struct.down.read(iprot);
          struct.setDownIsSet(true);
        }
      }
    }

  }

  public static class getPagedSortedFilteredAgeOffEventStates_args implements org.apache.thrift.TBase<getPagedSortedFilteredAgeOffEventStates_args, getPagedSortedFilteredAgeOffEventStates_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPagedSortedFilteredAgeOffEventStates_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPagedSortedFilteredAgeOffEventStates_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField STATUSES_FIELD_DESC = new org.apache.thrift.protocol.TField("statuses", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pageNum", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField NUM_PER_PAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("numPerPage", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPagedSortedFilteredAgeOffEventStates_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPagedSortedFilteredAgeOffEventStates_argsTupleSchemeFactory());
    }

    public ezbake.base.thrift.EzSecurityToken token; // required
    public List<CentralPurgeStatus> statuses; // required
    public int pageNum; // required
    public int numPerPage; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      STATUSES((short)2, "statuses"),
      PAGE_NUM((short)3, "pageNum"),
      NUM_PER_PAGE((short)4, "numPerPage");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // STATUSES
            return STATUSES;
          case 3: // PAGE_NUM
            return PAGE_NUM;
          case 4: // NUM_PER_PAGE
            return NUM_PER_PAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PAGENUM_ISSET_ID = 0;
    private static final int __NUMPERPAGE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      tmpMap.put(_Fields.STATUSES, new org.apache.thrift.meta_data.FieldMetaData("statuses", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CentralPurgeStatus.class))));
      tmpMap.put(_Fields.PAGE_NUM, new org.apache.thrift.meta_data.FieldMetaData("pageNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUM_PER_PAGE, new org.apache.thrift.meta_data.FieldMetaData("numPerPage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPagedSortedFilteredAgeOffEventStates_args.class, metaDataMap);
    }

    public getPagedSortedFilteredAgeOffEventStates_args() {
    }

    public getPagedSortedFilteredAgeOffEventStates_args(
      ezbake.base.thrift.EzSecurityToken token,
      List<CentralPurgeStatus> statuses,
      int pageNum,
      int numPerPage)
    {
      this();
      this.token = token;
      this.statuses = statuses;
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      this.numPerPage = numPerPage;
      setNumPerPageIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPagedSortedFilteredAgeOffEventStates_args(getPagedSortedFilteredAgeOffEventStates_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetToken()) {
        this.token = new ezbake.base.thrift.EzSecurityToken(other.token);
      }
      if (other.isSetStatuses()) {
        List<CentralPurgeStatus> __this__statuses = new ArrayList<CentralPurgeStatus>(other.statuses.size());
        for (CentralPurgeStatus other_element : other.statuses) {
          __this__statuses.add(other_element);
        }
        this.statuses = __this__statuses;
      }
      this.pageNum = other.pageNum;
      this.numPerPage = other.numPerPage;
    }

    public getPagedSortedFilteredAgeOffEventStates_args deepCopy() {
      return new getPagedSortedFilteredAgeOffEventStates_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      this.statuses = null;
      setPageNumIsSet(false);
      this.pageNum = 0;
      setNumPerPageIsSet(false);
      this.numPerPage = 0;
    }

    public ezbake.base.thrift.EzSecurityToken getToken() {
      return this.token;
    }

    public getPagedSortedFilteredAgeOffEventStates_args setToken(ezbake.base.thrift.EzSecurityToken token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public int getStatusesSize() {
      return (this.statuses == null) ? 0 : this.statuses.size();
    }

    public java.util.Iterator<CentralPurgeStatus> getStatusesIterator() {
      return (this.statuses == null) ? null : this.statuses.iterator();
    }

    public void addToStatuses(CentralPurgeStatus elem) {
      if (this.statuses == null) {
        this.statuses = new ArrayList<CentralPurgeStatus>();
      }
      this.statuses.add(elem);
    }

    public List<CentralPurgeStatus> getStatuses() {
      return this.statuses;
    }

    public getPagedSortedFilteredAgeOffEventStates_args setStatuses(List<CentralPurgeStatus> statuses) {
      this.statuses = statuses;
      return this;
    }

    public void unsetStatuses() {
      this.statuses = null;
    }

    /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
    public boolean isSetStatuses() {
      return this.statuses != null;
    }

    public void setStatusesIsSet(boolean value) {
      if (!value) {
        this.statuses = null;
      }
    }

    public int getPageNum() {
      return this.pageNum;
    }

    public getPagedSortedFilteredAgeOffEventStates_args setPageNum(int pageNum) {
      this.pageNum = pageNum;
      setPageNumIsSet(true);
      return this;
    }

    public void unsetPageNum() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    /** Returns true if field pageNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPageNum() {
      return EncodingUtils.testBit(__isset_bitfield, __PAGENUM_ISSET_ID);
    }

    public void setPageNumIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PAGENUM_ISSET_ID, value);
    }

    public int getNumPerPage() {
      return this.numPerPage;
    }

    public getPagedSortedFilteredAgeOffEventStates_args setNumPerPage(int numPerPage) {
      this.numPerPage = numPerPage;
      setNumPerPageIsSet(true);
      return this;
    }

    public void unsetNumPerPage() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID);
    }

    /** Returns true if field numPerPage is set (has been assigned a value) and false otherwise */
    public boolean isSetNumPerPage() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID);
    }

    public void setNumPerPageIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMPERPAGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      case STATUSES:
        if (value == null) {
          unsetStatuses();
        } else {
          setStatuses((List<CentralPurgeStatus>)value);
        }
        break;

      case PAGE_NUM:
        if (value == null) {
          unsetPageNum();
        } else {
          setPageNum((Integer)value);
        }
        break;

      case NUM_PER_PAGE:
        if (value == null) {
          unsetNumPerPage();
        } else {
          setNumPerPage((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case STATUSES:
        return getStatuses();

      case PAGE_NUM:
        return Integer.valueOf(getPageNum());

      case NUM_PER_PAGE:
        return Integer.valueOf(getNumPerPage());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case STATUSES:
        return isSetStatuses();
      case PAGE_NUM:
        return isSetPageNum();
      case NUM_PER_PAGE:
        return isSetNumPerPage();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPagedSortedFilteredAgeOffEventStates_args)
        return this.equals((getPagedSortedFilteredAgeOffEventStates_args)that);
      return false;
    }

    public boolean equals(getPagedSortedFilteredAgeOffEventStates_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_statuses = true && this.isSetStatuses();
      boolean that_present_statuses = true && that.isSetStatuses();
      if (this_present_statuses || that_present_statuses) {
        if (!(this_present_statuses && that_present_statuses))
          return false;
        if (!this.statuses.equals(that.statuses))
          return false;
      }

      boolean this_present_pageNum = true;
      boolean that_present_pageNum = true;
      if (this_present_pageNum || that_present_pageNum) {
        if (!(this_present_pageNum && that_present_pageNum))
          return false;
        if (this.pageNum != that.pageNum)
          return false;
      }

      boolean this_present_numPerPage = true;
      boolean that_present_numPerPage = true;
      if (this_present_numPerPage || that_present_numPerPage) {
        if (!(this_present_numPerPage && that_present_numPerPage))
          return false;
        if (this.numPerPage != that.numPerPage)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_token = true && (isSetToken());
      builder.append(present_token);
      if (present_token)
        builder.append(token);

      boolean present_statuses = true && (isSetStatuses());
      builder.append(present_statuses);
      if (present_statuses)
        builder.append(statuses);

      boolean present_pageNum = true;
      builder.append(present_pageNum);
      if (present_pageNum)
        builder.append(pageNum);

      boolean present_numPerPage = true;
      builder.append(present_numPerPage);
      if (present_numPerPage)
        builder.append(numPerPage);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getPagedSortedFilteredAgeOffEventStates_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatuses()).compareTo(other.isSetStatuses());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatuses()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statuses, other.statuses);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageNum()).compareTo(other.isSetPageNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageNum, other.pageNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumPerPage()).compareTo(other.isSetNumPerPage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumPerPage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numPerPage, other.numPerPage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPagedSortedFilteredAgeOffEventStates_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("statuses:");
      if (this.statuses == null) {
        sb.append("null");
      } else {
        sb.append(this.statuses);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageNum:");
      sb.append(this.pageNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numPerPage:");
      sb.append(this.numPerPage);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (token == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
      if (token != null) {
        token.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPagedSortedFilteredAgeOffEventStates_argsStandardSchemeFactory implements SchemeFactory {
      public getPagedSortedFilteredAgeOffEventStates_argsStandardScheme getScheme() {
        return new getPagedSortedFilteredAgeOffEventStates_argsStandardScheme();
      }
    }

    private static class getPagedSortedFilteredAgeOffEventStates_argsStandardScheme extends StandardScheme<getPagedSortedFilteredAgeOffEventStates_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPagedSortedFilteredAgeOffEventStates_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.token = new ezbake.base.thrift.EzSecurityToken();
                struct.token.read(iprot);
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUSES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list126 = iprot.readListBegin();
                  struct.statuses = new ArrayList<CentralPurgeStatus>(_list126.size);
                  for (int _i127 = 0; _i127 < _list126.size; ++_i127)
                  {
                    CentralPurgeStatus _elem128;
                    _elem128 = CentralPurgeStatus.findByValue(iprot.readI32());
                    struct.statuses.add(_elem128);
                  }
                  iprot.readListEnd();
                }
                struct.setStatusesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.pageNum = iprot.readI32();
                struct.setPageNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUM_PER_PAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numPerPage = iprot.readI32();
                struct.setNumPerPageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPagedSortedFilteredAgeOffEventStates_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          struct.token.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.statuses != null) {
          oprot.writeFieldBegin(STATUSES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.statuses.size()));
            for (CentralPurgeStatus _iter129 : struct.statuses)
            {
              oprot.writeI32(_iter129.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PAGE_NUM_FIELD_DESC);
        oprot.writeI32(struct.pageNum);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_PER_PAGE_FIELD_DESC);
        oprot.writeI32(struct.numPerPage);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPagedSortedFilteredAgeOffEventStates_argsTupleSchemeFactory implements SchemeFactory {
      public getPagedSortedFilteredAgeOffEventStates_argsTupleScheme getScheme() {
        return new getPagedSortedFilteredAgeOffEventStates_argsTupleScheme();
      }
    }

    private static class getPagedSortedFilteredAgeOffEventStates_argsTupleScheme extends TupleScheme<getPagedSortedFilteredAgeOffEventStates_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPagedSortedFilteredAgeOffEventStates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        struct.token.write(oprot);
        BitSet optionals = new BitSet();
        if (struct.isSetStatuses()) {
          optionals.set(0);
        }
        if (struct.isSetPageNum()) {
          optionals.set(1);
        }
        if (struct.isSetNumPerPage()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetStatuses()) {
          {
            oprot.writeI32(struct.statuses.size());
            for (CentralPurgeStatus _iter130 : struct.statuses)
            {
              oprot.writeI32(_iter130.getValue());
            }
          }
        }
        if (struct.isSetPageNum()) {
          oprot.writeI32(struct.pageNum);
        }
        if (struct.isSetNumPerPage()) {
          oprot.writeI32(struct.numPerPage);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPagedSortedFilteredAgeOffEventStates_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.token = new ezbake.base.thrift.EzSecurityToken();
        struct.token.read(iprot);
        struct.setTokenIsSet(true);
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list131 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.statuses = new ArrayList<CentralPurgeStatus>(_list131.size);
            for (int _i132 = 0; _i132 < _list131.size; ++_i132)
            {
              CentralPurgeStatus _elem133;
              _elem133 = CentralPurgeStatus.findByValue(iprot.readI32());
              struct.statuses.add(_elem133);
            }
          }
          struct.setStatusesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pageNum = iprot.readI32();
          struct.setPageNumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numPerPage = iprot.readI32();
          struct.setNumPerPageIsSet(true);
        }
      }
    }

  }

  public static class getPagedSortedFilteredAgeOffEventStates_result implements org.apache.thrift.TBase<getPagedSortedFilteredAgeOffEventStates_result, getPagedSortedFilteredAgeOffEventStates_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPagedSortedFilteredAgeOffEventStates_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPagedSortedFilteredAgeOffEventStates_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("down", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getPagedSortedFilteredAgeOffEventStates_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getPagedSortedFilteredAgeOffEventStates_resultTupleSchemeFactory());
    }

    public CentralAgeOffEventQueryResults success; // required
    public ezbake.base.thrift.EzSecurityTokenException security; // required
    public CentralPurgeServiceException down; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SECURITY((short)1, "security"),
      DOWN((short)2, "down");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SECURITY
            return SECURITY;
          case 2: // DOWN
            return DOWN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CentralAgeOffEventQueryResults.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.DOWN, new org.apache.thrift.meta_data.FieldMetaData("down", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPagedSortedFilteredAgeOffEventStates_result.class, metaDataMap);
    }

    public getPagedSortedFilteredAgeOffEventStates_result() {
    }

    public getPagedSortedFilteredAgeOffEventStates_result(
      CentralAgeOffEventQueryResults success,
      ezbake.base.thrift.EzSecurityTokenException security,
      CentralPurgeServiceException down)
    {
      this();
      this.success = success;
      this.security = security;
      this.down = down;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPagedSortedFilteredAgeOffEventStates_result(getPagedSortedFilteredAgeOffEventStates_result other) {
      if (other.isSetSuccess()) {
        this.success = new CentralAgeOffEventQueryResults(other.success);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityTokenException(other.security);
      }
      if (other.isSetDown()) {
        this.down = new CentralPurgeServiceException(other.down);
      }
    }

    public getPagedSortedFilteredAgeOffEventStates_result deepCopy() {
      return new getPagedSortedFilteredAgeOffEventStates_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.security = null;
      this.down = null;
    }

    public CentralAgeOffEventQueryResults getSuccess() {
      return this.success;
    }

    public getPagedSortedFilteredAgeOffEventStates_result setSuccess(CentralAgeOffEventQueryResults success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.base.thrift.EzSecurityTokenException getSecurity() {
      return this.security;
    }

    public getPagedSortedFilteredAgeOffEventStates_result setSecurity(ezbake.base.thrift.EzSecurityTokenException security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public CentralPurgeServiceException getDown() {
      return this.down;
    }

    public getPagedSortedFilteredAgeOffEventStates_result setDown(CentralPurgeServiceException down) {
      this.down = down;
      return this;
    }

    public void unsetDown() {
      this.down = null;
    }

    /** Returns true if field down is set (has been assigned a value) and false otherwise */
    public boolean isSetDown() {
      return this.down != null;
    }

    public void setDownIsSet(boolean value) {
      if (!value) {
        this.down = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CentralAgeOffEventQueryResults)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityTokenException)value);
        }
        break;

      case DOWN:
        if (value == null) {
          unsetDown();
        } else {
          setDown((CentralPurgeServiceException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SECURITY:
        return getSecurity();

      case DOWN:
        return getDown();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SECURITY:
        return isSetSecurity();
      case DOWN:
        return isSetDown();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPagedSortedFilteredAgeOffEventStates_result)
        return this.equals((getPagedSortedFilteredAgeOffEventStates_result)that);
      return false;
    }

    public boolean equals(getPagedSortedFilteredAgeOffEventStates_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      boolean this_present_down = true && this.isSetDown();
      boolean that_present_down = true && that.isSetDown();
      if (this_present_down || that_present_down) {
        if (!(this_present_down && that_present_down))
          return false;
        if (!this.down.equals(that.down))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_security = true && (isSetSecurity());
      builder.append(present_security);
      if (present_security)
        builder.append(security);

      boolean present_down = true && (isSetDown());
      builder.append(present_down);
      if (present_down)
        builder.append(down);

      return builder.toHashCode();
    }

    @Override
    public int compareTo(getPagedSortedFilteredAgeOffEventStates_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDown()).compareTo(other.isSetDown());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDown()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.down, other.down);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getPagedSortedFilteredAgeOffEventStates_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("down:");
      if (this.down == null) {
        sb.append("null");
      } else {
        sb.append(this.down);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPagedSortedFilteredAgeOffEventStates_resultStandardSchemeFactory implements SchemeFactory {
      public getPagedSortedFilteredAgeOffEventStates_resultStandardScheme getScheme() {
        return new getPagedSortedFilteredAgeOffEventStates_resultStandardScheme();
      }
    }

    private static class getPagedSortedFilteredAgeOffEventStates_resultStandardScheme extends StandardScheme<getPagedSortedFilteredAgeOffEventStates_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPagedSortedFilteredAgeOffEventStates_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CentralAgeOffEventQueryResults();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityTokenException();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DOWN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.down = new CentralPurgeServiceException();
                struct.down.read(iprot);
                struct.setDownIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPagedSortedFilteredAgeOffEventStates_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.down != null) {
          oprot.writeFieldBegin(DOWN_FIELD_DESC);
          struct.down.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPagedSortedFilteredAgeOffEventStates_resultTupleSchemeFactory implements SchemeFactory {
      public getPagedSortedFilteredAgeOffEventStates_resultTupleScheme getScheme() {
        return new getPagedSortedFilteredAgeOffEventStates_resultTupleScheme();
      }
    }

    private static class getPagedSortedFilteredAgeOffEventStates_resultTupleScheme extends TupleScheme<getPagedSortedFilteredAgeOffEventStates_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPagedSortedFilteredAgeOffEventStates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        if (struct.isSetDown()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
        if (struct.isSetDown()) {
          struct.down.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPagedSortedFilteredAgeOffEventStates_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new CentralAgeOffEventQueryResults();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityTokenException();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.down = new CentralPurgeServiceException();
          struct.down.read(iprot);
          struct.setDownIsSet(true);
        }
      }
    }

  }

}
