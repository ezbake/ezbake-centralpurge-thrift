/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.services.centralPurge.thrift;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ServicePurgeState implements org.apache.thrift.TBase<ServicePurgeState, ServicePurgeState._Fields>, java.io.Serializable, Cloneable, Comparable<ServicePurgeState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServicePurgeState");

  private static final org.apache.thrift.protocol.TField PURGE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("purgeState", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField TIME_INITIATED_FIELD_DESC = new org.apache.thrift.protocol.TField("timeInitiated", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_LAST_POLL_FIELD_DESC = new org.apache.thrift.protocol.TField("timeLastPoll", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServicePurgeStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServicePurgeStateTupleSchemeFactory());
  }

  public ezbake.base.thrift.PurgeState purgeState; // required
  public ezbake.base.thrift.DateTime timeInitiated; // required
  public ezbake.base.thrift.DateTime timeLastPoll; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PURGE_STATE((short)1, "purgeState"),
    TIME_INITIATED((short)2, "timeInitiated"),
    TIME_LAST_POLL((short)3, "timeLastPoll");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PURGE_STATE
          return PURGE_STATE;
        case 2: // TIME_INITIATED
          return TIME_INITIATED;
        case 3: // TIME_LAST_POLL
          return TIME_LAST_POLL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PURGE_STATE, new org.apache.thrift.meta_data.FieldMetaData("purgeState", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.PurgeState.class)));
    tmpMap.put(_Fields.TIME_INITIATED, new org.apache.thrift.meta_data.FieldMetaData("timeInitiated", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
    tmpMap.put(_Fields.TIME_LAST_POLL, new org.apache.thrift.meta_data.FieldMetaData("timeLastPoll", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServicePurgeState.class, metaDataMap);
  }

  public ServicePurgeState() {
  }

  public ServicePurgeState(
    ezbake.base.thrift.PurgeState purgeState,
    ezbake.base.thrift.DateTime timeInitiated,
    ezbake.base.thrift.DateTime timeLastPoll)
  {
    this();
    this.purgeState = purgeState;
    this.timeInitiated = timeInitiated;
    this.timeLastPoll = timeLastPoll;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServicePurgeState(ServicePurgeState other) {
    if (other.isSetPurgeState()) {
      this.purgeState = new ezbake.base.thrift.PurgeState(other.purgeState);
    }
    if (other.isSetTimeInitiated()) {
      this.timeInitiated = new ezbake.base.thrift.DateTime(other.timeInitiated);
    }
    if (other.isSetTimeLastPoll()) {
      this.timeLastPoll = new ezbake.base.thrift.DateTime(other.timeLastPoll);
    }
  }

  public ServicePurgeState deepCopy() {
    return new ServicePurgeState(this);
  }

  @Override
  public void clear() {
    this.purgeState = null;
    this.timeInitiated = null;
    this.timeLastPoll = null;
  }

  public ezbake.base.thrift.PurgeState getPurgeState() {
    return this.purgeState;
  }

  public ServicePurgeState setPurgeState(ezbake.base.thrift.PurgeState purgeState) {
    this.purgeState = purgeState;
    return this;
  }

  public void unsetPurgeState() {
    this.purgeState = null;
  }

  /** Returns true if field purgeState is set (has been assigned a value) and false otherwise */
  public boolean isSetPurgeState() {
    return this.purgeState != null;
  }

  public void setPurgeStateIsSet(boolean value) {
    if (!value) {
      this.purgeState = null;
    }
  }

  public ezbake.base.thrift.DateTime getTimeInitiated() {
    return this.timeInitiated;
  }

  public ServicePurgeState setTimeInitiated(ezbake.base.thrift.DateTime timeInitiated) {
    this.timeInitiated = timeInitiated;
    return this;
  }

  public void unsetTimeInitiated() {
    this.timeInitiated = null;
  }

  /** Returns true if field timeInitiated is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeInitiated() {
    return this.timeInitiated != null;
  }

  public void setTimeInitiatedIsSet(boolean value) {
    if (!value) {
      this.timeInitiated = null;
    }
  }

  public ezbake.base.thrift.DateTime getTimeLastPoll() {
    return this.timeLastPoll;
  }

  public ServicePurgeState setTimeLastPoll(ezbake.base.thrift.DateTime timeLastPoll) {
    this.timeLastPoll = timeLastPoll;
    return this;
  }

  public void unsetTimeLastPoll() {
    this.timeLastPoll = null;
  }

  /** Returns true if field timeLastPoll is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeLastPoll() {
    return this.timeLastPoll != null;
  }

  public void setTimeLastPollIsSet(boolean value) {
    if (!value) {
      this.timeLastPoll = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PURGE_STATE:
      if (value == null) {
        unsetPurgeState();
      } else {
        setPurgeState((ezbake.base.thrift.PurgeState)value);
      }
      break;

    case TIME_INITIATED:
      if (value == null) {
        unsetTimeInitiated();
      } else {
        setTimeInitiated((ezbake.base.thrift.DateTime)value);
      }
      break;

    case TIME_LAST_POLL:
      if (value == null) {
        unsetTimeLastPoll();
      } else {
        setTimeLastPoll((ezbake.base.thrift.DateTime)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PURGE_STATE:
      return getPurgeState();

    case TIME_INITIATED:
      return getTimeInitiated();

    case TIME_LAST_POLL:
      return getTimeLastPoll();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PURGE_STATE:
      return isSetPurgeState();
    case TIME_INITIATED:
      return isSetTimeInitiated();
    case TIME_LAST_POLL:
      return isSetTimeLastPoll();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServicePurgeState)
      return this.equals((ServicePurgeState)that);
    return false;
  }

  public boolean equals(ServicePurgeState that) {
    if (that == null)
      return false;

    boolean this_present_purgeState = true && this.isSetPurgeState();
    boolean that_present_purgeState = true && that.isSetPurgeState();
    if (this_present_purgeState || that_present_purgeState) {
      if (!(this_present_purgeState && that_present_purgeState))
        return false;
      if (!this.purgeState.equals(that.purgeState))
        return false;
    }

    boolean this_present_timeInitiated = true && this.isSetTimeInitiated();
    boolean that_present_timeInitiated = true && that.isSetTimeInitiated();
    if (this_present_timeInitiated || that_present_timeInitiated) {
      if (!(this_present_timeInitiated && that_present_timeInitiated))
        return false;
      if (!this.timeInitiated.equals(that.timeInitiated))
        return false;
    }

    boolean this_present_timeLastPoll = true && this.isSetTimeLastPoll();
    boolean that_present_timeLastPoll = true && that.isSetTimeLastPoll();
    if (this_present_timeLastPoll || that_present_timeLastPoll) {
      if (!(this_present_timeLastPoll && that_present_timeLastPoll))
        return false;
      if (!this.timeLastPoll.equals(that.timeLastPoll))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_purgeState = true && (isSetPurgeState());
    builder.append(present_purgeState);
    if (present_purgeState)
      builder.append(purgeState);

    boolean present_timeInitiated = true && (isSetTimeInitiated());
    builder.append(present_timeInitiated);
    if (present_timeInitiated)
      builder.append(timeInitiated);

    boolean present_timeLastPoll = true && (isSetTimeLastPoll());
    builder.append(present_timeLastPoll);
    if (present_timeLastPoll)
      builder.append(timeLastPoll);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(ServicePurgeState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPurgeState()).compareTo(other.isSetPurgeState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPurgeState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.purgeState, other.purgeState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeInitiated()).compareTo(other.isSetTimeInitiated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeInitiated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeInitiated, other.timeInitiated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeLastPoll()).compareTo(other.isSetTimeLastPoll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeLastPoll()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeLastPoll, other.timeLastPoll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServicePurgeState(");
    boolean first = true;

    sb.append("purgeState:");
    if (this.purgeState == null) {
      sb.append("null");
    } else {
      sb.append(this.purgeState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeInitiated:");
    if (this.timeInitiated == null) {
      sb.append("null");
    } else {
      sb.append(this.timeInitiated);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeLastPoll:");
    if (this.timeLastPoll == null) {
      sb.append("null");
    } else {
      sb.append(this.timeLastPoll);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (purgeState == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'purgeState' was not present! Struct: " + toString());
    }
    if (timeInitiated == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeInitiated' was not present! Struct: " + toString());
    }
    if (timeLastPoll == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'timeLastPoll' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (purgeState != null) {
      purgeState.validate();
    }
    if (timeInitiated != null) {
      timeInitiated.validate();
    }
    if (timeLastPoll != null) {
      timeLastPoll.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServicePurgeStateStandardSchemeFactory implements SchemeFactory {
    public ServicePurgeStateStandardScheme getScheme() {
      return new ServicePurgeStateStandardScheme();
    }
  }

  private static class ServicePurgeStateStandardScheme extends StandardScheme<ServicePurgeState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServicePurgeState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PURGE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.purgeState = new ezbake.base.thrift.PurgeState();
              struct.purgeState.read(iprot);
              struct.setPurgeStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIME_INITIATED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.timeInitiated = new ezbake.base.thrift.DateTime();
              struct.timeInitiated.read(iprot);
              struct.setTimeInitiatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME_LAST_POLL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.timeLastPoll = new ezbake.base.thrift.DateTime();
              struct.timeLastPoll.read(iprot);
              struct.setTimeLastPollIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServicePurgeState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.purgeState != null) {
        oprot.writeFieldBegin(PURGE_STATE_FIELD_DESC);
        struct.purgeState.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.timeInitiated != null) {
        oprot.writeFieldBegin(TIME_INITIATED_FIELD_DESC);
        struct.timeInitiated.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.timeLastPoll != null) {
        oprot.writeFieldBegin(TIME_LAST_POLL_FIELD_DESC);
        struct.timeLastPoll.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServicePurgeStateTupleSchemeFactory implements SchemeFactory {
    public ServicePurgeStateTupleScheme getScheme() {
      return new ServicePurgeStateTupleScheme();
    }
  }

  private static class ServicePurgeStateTupleScheme extends TupleScheme<ServicePurgeState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServicePurgeState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.purgeState.write(oprot);
      struct.timeInitiated.write(oprot);
      struct.timeLastPoll.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServicePurgeState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.purgeState = new ezbake.base.thrift.PurgeState();
      struct.purgeState.read(iprot);
      struct.setPurgeStateIsSet(true);
      struct.timeInitiated = new ezbake.base.thrift.DateTime();
      struct.timeInitiated.read(iprot);
      struct.setTimeInitiatedIsSet(true);
      struct.timeLastPoll = new ezbake.base.thrift.DateTime();
      struct.timeLastPoll.read(iprot);
      struct.setTimeLastPollIsSet(true);
    }
  }

}

